{
    "docs": [
        {
            "location": "/", 
            "text": "Description\n\n\nViVa.jl is a user-friendly command line tool for creating publication quality graphics from Variant Call Format (VCF) files. ViVa.jl provides tools to quickly select variant records and samples to include in visualization.\n\nViVa.jl utilizes ArgParse.jl to parse command line arguments and GeneticVariation.jl to create a memory-efficient VCF Reader object which ViVa.jl utilizes to quickly extract variants of interest.\n\nThis documentation details each [REQUIRED] and optional argument, as well as necessary specific structure for user-generated input files for manipulating records and samples. Clearly named examples of all user-generated input files can be found in the /tests/ directory of the ViVa.jl repository.\n\nViVa.jl can be run through the command line with the following structure:\n\njulia viva_cli.jl [--help] [COMMAND] [OPTIONS]\n\nExample:\njulia viva_cli.jl -v example.vcf -r chr1:20000-30000000 -s html --heatmap read_depth --line_chart samples\n\n\n\n\n\nInstallation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne6804e0d0fe65a23bcac9cfccb1395101d283ed2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstall ViVa.jl\n\n\nTo stay up to date with new features before release, please check out the master branch.\n\n\nusing\n \nPkg\n\n\nPkg\n.\nclone\n(\nhttps://github.com/compbiocore/ViVa.jl\n)", 
            "title": "Home"
        }, 
        {
            "location": "/#description", 
            "text": "ViVa.jl is a user-friendly command line tool for creating publication quality graphics from Variant Call Format (VCF) files. ViVa.jl provides tools to quickly select variant records and samples to include in visualization.\n\nViVa.jl utilizes ArgParse.jl to parse command line arguments and GeneticVariation.jl to create a memory-efficient VCF Reader object which ViVa.jl utilizes to quickly extract variants of interest.\n\nThis documentation details each [REQUIRED] and optional argument, as well as necessary specific structure for user-generated input files for manipulating records and samples. Clearly named examples of all user-generated input files can be found in the /tests/ directory of the ViVa.jl repository.\n\nViVa.jl can be run through the command line with the following structure:\n\njulia viva_cli.jl [--help] [COMMAND] [OPTIONS]\n\nExample:\njulia viva_cli.jl -v example.vcf -r chr1:20000-30000000 -s html --heatmap read_depth --line_chart samples", 
            "title": "Description"
        }, 
        {
            "location": "/#installation", 
            "text": "e6804e0d0fe65a23bcac9cfccb1395101d283ed2         Install ViVa.jl  To stay up to date with new features before release, please check out the master branch.  using   Pkg  Pkg . clone ( https://github.com/compbiocore/ViVa.jl )", 
            "title": "Installation"
        }, 
        {
            "location": "/filtering_vcf/", 
            "text": "VCF Record and Sample Manipulation\n\n\nViVa.jl provides tools for filtering records as well as selecting and grouping samples by common traits for visualization. Users can access these tools by using ViVa.jl on the command line using the following arguments or single character flags when available for convenience.\n\n\n\n\n\n\n\nReading a VCF\n\n\nSpecify filename of VCF file. [REQUIRED]\n\n--vcf_file\n, \n-f\n\n... -f example.vcf ..\n\nPrint number of records and samples in VCF file.\n\n--show_stats\n\n... --show_stats ...\n\n\n\n\n\n\n\nFiltering Records\n\n\nSelect rows within a given chromosome range. Provide chromosome range after this flag.\n\n--chromosome_range\n, \n-r\n\n... -r chr1:20000-30000000 ...\n\nSelect rows within a given chromosome range. Provide chromosome range after this flag in format chr4:20000000-30000000\n\n--pass_filter\n, \n-p\n\n... --pass_filter ...\n\nSelect variants matching list of chromosomal positions. Provide filename of text file formatted with two columns in .csv format.\n\n--positions_list\n, \n-l\n\n... -l \nexample_positions_list.txt\n\n\n\n\n\n\n\n\nSelecting and Grouping Samples\n\n\nSelect samples to include in visualization by providing tab delimited list of sample names (eg. samplenames.txt)\n\n--select_samples\n, \n-x\n\n... -x example_list_of_sample_ids.txt\n\nGroup samples by common trait using user generated matrix key of traits and sample names following format guidelines in documentation. Provide file name of .csv file followed by trait to group by as it appears in the matrix key of traits and sample names.\n\n--group_samples\n, \n-g\n\n... -g example_sample_traits_key.csv controls,cases ...", 
            "title": "Read and Filter VCF"
        }, 
        {
            "location": "/filtering_vcf/#vcf-record-and-sample-manipulation", 
            "text": "ViVa.jl provides tools for filtering records as well as selecting and grouping samples by common traits for visualization. Users can access these tools by using ViVa.jl on the command line using the following arguments or single character flags when available for convenience.", 
            "title": "VCF Record and Sample Manipulation"
        }, 
        {
            "location": "/filtering_vcf/#reading-a-vcf", 
            "text": "Specify filename of VCF file. [REQUIRED] --vcf_file ,  -f \n... -f example.vcf ..\n\nPrint number of records and samples in VCF file. --show_stats \n... --show_stats ...", 
            "title": "Reading a VCF"
        }, 
        {
            "location": "/filtering_vcf/#filtering-records", 
            "text": "Select rows within a given chromosome range. Provide chromosome range after this flag. --chromosome_range ,  -r \n... -r chr1:20000-30000000 ...\n\nSelect rows within a given chromosome range. Provide chromosome range after this flag in format chr4:20000000-30000000 --pass_filter ,  -p \n... --pass_filter ...\n\nSelect variants matching list of chromosomal positions. Provide filename of text file formatted with two columns in .csv format. --positions_list ,  -l \n... -l  example_positions_list.txt", 
            "title": "Filtering Records"
        }, 
        {
            "location": "/filtering_vcf/#selecting-and-grouping-samples", 
            "text": "Select samples to include in visualization by providing tab delimited list of sample names (eg. samplenames.txt) --select_samples ,  -x \n... -x example_list_of_sample_ids.txt\n\nGroup samples by common trait using user generated matrix key of traits and sample names following format guidelines in documentation. Provide file name of .csv file followed by trait to group by as it appears in the matrix key of traits and sample names. --group_samples ,  -g \n... -g example_sample_traits_key.csv controls,cases ...", 
            "title": "Selecting and Grouping Samples"
        }, 
        {
            "location": "/plotting/", 
            "text": "Plotting genotype field data as a categorical heatmap.\n\n\nGenerate heatmap of distribution of values in genotype field across samples. Defaults to genotype.\n\n--heatmap\n, \n-m\n\n... -m [option] ...\nPossible options:\ngenotype\nread_depth\n\nGenerate scatter plots of average read depths across either samples or variants.\n... --line_chart [option] ...\nPossible options:\nsample\nvariant\n\nSpecify file format you wish to save all graphics as (eg. pdf, html, png). [REQUIRED]\n\n--save_format\n, \n-s\n    \n... -s [option] ...\nPossible options:\nhtml\npdf\nsvg\npng   \n\nSpecify output directory for saving all graphics. If directory doesn\nt exist, it creates the directory within the working directory. Defaults to \noutput.\n\n\n--output_directory\n, \n-o\n\n... --line_chart [option] ...\n\nSpecify filename for saving heatmap. #test this, positional argument?\n\nheatmap_title", 
            "title": "Heatmaps"
        }, 
        {
            "location": "/plotting/#plotting-genotype-field-data-as-a-categorical-heatmap", 
            "text": "Generate heatmap of distribution of values in genotype field across samples. Defaults to genotype. --heatmap ,  -m \n... -m [option] ...\nPossible options:\ngenotype\nread_depth\n\nGenerate scatter plots of average read depths across either samples or variants.\n... --line_chart [option] ...\nPossible options:\nsample\nvariant\n\nSpecify file format you wish to save all graphics as (eg. pdf, html, png). [REQUIRED] --save_format ,  -s     \n... -s [option] ...\nPossible options:\nhtml\npdf\nsvg\npng   \n\nSpecify output directory for saving all graphics. If directory doesn t exist, it creates the directory within the working directory. Defaults to  output.  --output_directory ,  -o \n... --line_chart [option] ...\n\nSpecify filename for saving heatmap. #test this, positional argument? heatmap_title", 
            "title": "Plotting genotype field data as a categorical heatmap."
        }
    ]
}