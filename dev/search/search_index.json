{
    "docs": [
        {
            "location": "/", 
            "text": "Getting Started\n\n\n\n\nVIVA Command Line Tool and Jupyter Notebook\n\n\n\n\nDescription\n\n\nVIVA is a user-friendly command line tool built with our VariantVisualization.jl package for exploratory analysis and generation of publication quality graphics for variant analysis projects using Variant Call Format (VCF) files.\n\n\nVariant selection and plotting is all executed in a single command.\n\n\nWe describe each of VIVA's arguments in this documentation under the Manual page.\n\n\nVIVA is available as a Jupyter Notebook utility \nhere\n. Instructions for installing Jupyter, downloading VIVA Jupyter Notebook, and using the notebook are detailed in the \nJupyter Notebook\n section of this documentation.\n\n\nFormatting requirements for VIVA's input files are described in the Manual and clearly named examples of all user-generated input files can be found in the \n/test/test_files\n directory of the \nVariantVisualization.jl\n repository.\n\n\n\n\nGeneral Use\n\n\nTo use VIVA, we recommend creating a new directory for storing your VCF file to analyze where output files will be saved. Alternatively, users may also provide paths to the VCF file and to preferred output file locations as command line arguments.\n\n\n\n\nCommand Line\n\n\nVIVA's general command line argument structure is as follows:\n\n\n    \njulia\n \nVIVA\n \n-\nf\n \nfile\n.\nvcf\n \n[\nOPTIONS\n]\n\n\n\n\n\n\nFrom the command line or powershell, run the VIVA command line tool script which takes arguments from the command line and parses them with ArgParse.jl.\n\n\nExample:\n\n\n    \njulia\n \nVIVA\n \n-\nf\n \nexample\n.\nvcf\n \n-\nr\n \nchr1\n:\n20000\n-\n30000000\n \n-\ns\n \npdf\n \n-\nm\n \ngenotype\n,\nread_depth\n \n--avg_dp samples\n\n\n\n\n\n\nTo display a complete set of help instructions while using the tool, run VIVA with the help flag (\n--help\n, \n-h\n).\n\n\n    \njulia\n \nVIVA\n \n-\nh\n\n\n\n\n\n\n\n\nDefault Options:\n\n\nBy running VIVA with only a VCF filename:\n\n\n    \njulia\n \nVIVA\n \n-\nf\n \nfile\n.\nvcf\n\n\n\n\n\n\nDefault options will be used:\n\n\n--heatmap\n = \ngenotype,read_depth\n \n--save_format\n = \nhtml\n \n--output_directory\n = \noutput\n \n--heatmap_title\n = \nvcf_filename\n \n--y_axis_labels\n = \nchromosomes\n \n--x_axis_labels\n = \ntrue\n\n\nThese default settings generate a heatmap plots of genotype and read depth values of all variants for all sample ids within a VCF file.\n\n\nWe recommend using variant filters with most VCF files as there is too much data to plot or evaluate visually.\n\n\nSpecifically, we recommend visualizing fewer than 2000 variants at a time for effective visualization. However, VIVA uses memory efficient filtering and plotting and is capable of plotting \n200,000 datapoints.\n\n\n\n\nJupyter Notebook\n\n\nUse the following steps to use the VIVA Jupyter Notebook utility:\n\n\n\n\nInstall Jupyter Notebook following the \nplatform specific instructions\n\n\nDownload the \nVIVA Jupyter Notebook\n to a working directory containing your VCF file.\n\n\nOpen the Julia REPL on the command line from any directory.\n\n\nRun \nusing IJulia\n and then \nnotebook()\n\n\nNavigate to the directory containing the VIVA Jupyter Notebook \nVIVA.ipynb\n and double click to open.\n\n\nFollow the step-by-step instructions within the notebook to generate your figures.\n\n\n\n\n\n\nContinue reading for:\n\n\n\n\nVariant and Sample Selection\n\n\nPlotting Options", 
            "title": "Home"
        }, 
        {
            "location": "/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#viva-command-line-tool-and-jupyter-notebook", 
            "text": "", 
            "title": "VIVA Command Line Tool and Jupyter Notebook"
        }, 
        {
            "location": "/#description", 
            "text": "VIVA is a user-friendly command line tool built with our VariantVisualization.jl package for exploratory analysis and generation of publication quality graphics for variant analysis projects using Variant Call Format (VCF) files.  Variant selection and plotting is all executed in a single command.  We describe each of VIVA's arguments in this documentation under the Manual page.  VIVA is available as a Jupyter Notebook utility  here . Instructions for installing Jupyter, downloading VIVA Jupyter Notebook, and using the notebook are detailed in the  Jupyter Notebook  section of this documentation.  Formatting requirements for VIVA's input files are described in the Manual and clearly named examples of all user-generated input files can be found in the  /test/test_files  directory of the  VariantVisualization.jl  repository.", 
            "title": "Description"
        }, 
        {
            "location": "/#general-use", 
            "text": "To use VIVA, we recommend creating a new directory for storing your VCF file to analyze where output files will be saved. Alternatively, users may also provide paths to the VCF file and to preferred output file locations as command line arguments.", 
            "title": "General Use"
        }, 
        {
            "location": "/#command-line", 
            "text": "VIVA's general command line argument structure is as follows:       julia   VIVA   - f   file . vcf   [ OPTIONS ]   From the command line or powershell, run the VIVA command line tool script which takes arguments from the command line and parses them with ArgParse.jl.  Example:       julia   VIVA   - f   example . vcf   - r   chr1 : 20000 - 30000000   - s   pdf   - m   genotype , read_depth   --avg_dp samples   To display a complete set of help instructions while using the tool, run VIVA with the help flag ( --help ,  -h ).       julia   VIVA   - h", 
            "title": "Command Line"
        }, 
        {
            "location": "/#default-options", 
            "text": "By running VIVA with only a VCF filename:       julia   VIVA   - f   file . vcf   Default options will be used:  --heatmap  =  genotype,read_depth   --save_format  =  html   --output_directory  =  output   --heatmap_title  =  vcf_filename   --y_axis_labels  =  chromosomes   --x_axis_labels  =  true  These default settings generate a heatmap plots of genotype and read depth values of all variants for all sample ids within a VCF file.  We recommend using variant filters with most VCF files as there is too much data to plot or evaluate visually.  Specifically, we recommend visualizing fewer than 2000 variants at a time for effective visualization. However, VIVA uses memory efficient filtering and plotting and is capable of plotting  200,000 datapoints.", 
            "title": "Default Options:"
        }, 
        {
            "location": "/#jupyter-notebook", 
            "text": "Use the following steps to use the VIVA Jupyter Notebook utility:   Install Jupyter Notebook following the  platform specific instructions  Download the  VIVA Jupyter Notebook  to a working directory containing your VCF file.  Open the Julia REPL on the command line from any directory.  Run  using IJulia  and then  notebook()  Navigate to the directory containing the VIVA Jupyter Notebook  VIVA.ipynb  and double click to open.  Follow the step-by-step instructions within the notebook to generate your figures.", 
            "title": "Jupyter Notebook"
        }, 
        {
            "location": "/#continue-reading-for", 
            "text": "Variant and Sample Selection  Plotting Options", 
            "title": "Continue reading for:"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\n\n\n\nInstall Julia v1.1.0\n\n\nDownload \nJulia\n\n\n\n\nSupported Operating Systems:\n\n\n\n\nmacOS\n\n\nSierra, High Sierra, and Mojave.\n\n\n\n\nWindows\n\n\nWindows 10, Windows 7.\n\n\n\n\nLinux\n\n\nNote\n: To run on remote compute clusters, you may need to load opengl module along with julia/1.1.0.\n\n\n\n\nCommand Line Tool\n\n\n\n\nAdd VariantVisualization.jl using Pkg in the Julia REPL:\n\n\n\n\nrun\n \n`\nusing\n \nPkg\n`\n\n\nrun\n \n`\nPkg\n.\nclone\n(\nhttps://github.com/compbiocore/VariantVisualization.jl\n)\n`\n\n\nrun\n \n`\nPkg\n.\ninstantiate\n()\n`\n\n\n\n\n\n\n\n\nDownload the \nVIVA\n tool script and save it to a working directory for your analysis.\n\n\nNavigate to your working directory and follow the \nVIVA manual\n to generate your plots.\n\n\n\n\n\n\nJupyter Notebook\n\n\n\n\nInstall Jupyter\n\n\nDownload the \nVIVA Jupyter Notebook\n.\n\n\nFollow the in-notebook instructions to generate your plots.\n\n\n\n\n\n\n\n\nUsing Docker and Docker Compose\n\n\nIf you don't want to install Julia and VariantVisualization, you can use the Docker images provided. For that, first \ninstall Docker\n.\n\n\n\n\nUsing Docker\n\n\nWe provide two images, one with a Jupyter Notebook and one with a command line script for VIVA.\n\n\nCreate a project folder and navigate to it:\n\n\nmkdir project_x\n\ncd\n project_x\n\n\n\n\n\nMake sure to add your project VCF files to that folder. That directory will be mapped to \n/notebook/data\n inside of the container.\n\n\nThen, to run the Jupyter Notebook, from the terminal or Windows PowerShell:\n\n\ndocker run --rm -p \n8888\n:8888 -e \nJUPYTER_ENABLE_LAB\n=\nyes -v \n$PWD\n:/notebook/data compbiocore/viva-notebook\n\n\n\n\n\nGo to \nhttp://0.0.0.0:8888/?token=\nenter token here\n\n\nClick here\n for more information about Jupyter Docker Images.\n\n\nTo run VIVA Command Line Tool:\n\n\nOn Mac or Linux:\n\n\ndocker run -it --rm -v \n$PWD\n:/data compbiocore/viva-cli arg1 arg2 arg3\n\n\n\n\n\nOn Windows:\n\n\ndocker run -it --rm -v \n${\npwd\n}\n:/data compbiocore/viva-cli arg1 arg2 arg3\n\n\n\n\n\n\n\nUsing Docker Compose\n\n\nTo run the images with Docker Compose, copy the \ndocker-compose.yml\n file to a local directory. From that same directory, run the commandas below.\n\n\n!!! Note   Your current directory will mount to \n/notebook/data\n in the notebook image and to \n/data\n in the CLI image.\n\n\n\n\nNotebook\n\n\n\n\ndocker-compose up viva-notebook\n\n\n\n\n\n\n\nCommand Line Tool\n\n\n\n\ndocker-compose run viva -f /data/file.vcf arg2 arg3 ...\n\n\n\n\n\n\n\n\n\nLatest Features\n\n\nTo stay up to date with cutting edge development features install VariantVisualization.jl from the Master branch.\n\n\nUsing git from the command line:\n\n\ngit\n \nclone\n \nhttps\n:\n//\ngithub\n.\ncom\n/\ncompbiocore\n/\nVariantVisualization\n.\njl\n\n\n\n\n\n\nor from the Julia REPL (useful if using the PowerShell and don't have git installed):\n\n\nusing\n \nPkg\n\n\nPkg\n.\nclone\n(\nhttps://github.com/compbiocore/VariantVisualization.jl\n)\n\n\n\n\n\n\n\n\nFor Developers\n\n\nVIVA Jupyter notebook and the VIVA the command line tool are built with functions contained in our VariantVisualization.jl package.\n\n\nDevelopers may contribute to these open source tools by using \nfunctions contained within VariantVisualization.jl\n which are carefully documented with docstrings.\n\n\nWe have included in-line comments within the code for the \nVIVA command line tool\n.\n\n\nThe \nVIVA Jupyter notebook\n is powered by a \nmain function\n which takes arguments defined by the user in the notebook. We welcome users to post in issues to request a new feature or bug fix.", 
            "title": "Installation and Setup"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#install-julia-v110", 
            "text": "Download  Julia", 
            "title": "Install Julia v1.1.0"
        }, 
        {
            "location": "/installation/#supported-operating-systems", 
            "text": "", 
            "title": "Supported Operating Systems:"
        }, 
        {
            "location": "/installation/#macos", 
            "text": "Sierra, High Sierra, and Mojave.", 
            "title": "macOS"
        }, 
        {
            "location": "/installation/#windows", 
            "text": "Windows 10, Windows 7.", 
            "title": "Windows"
        }, 
        {
            "location": "/installation/#linux", 
            "text": "Note : To run on remote compute clusters, you may need to load opengl module along with julia/1.1.0.", 
            "title": "Linux"
        }, 
        {
            "location": "/installation/#command-line-tool", 
            "text": "Add VariantVisualization.jl using Pkg in the Julia REPL:   run   ` using   Pkg `  run   ` Pkg . clone ( https://github.com/compbiocore/VariantVisualization.jl ) `  run   ` Pkg . instantiate () `    Download the  VIVA  tool script and save it to a working directory for your analysis.  Navigate to your working directory and follow the  VIVA manual  to generate your plots.", 
            "title": "Command Line Tool"
        }, 
        {
            "location": "/installation/#jupyter-notebook", 
            "text": "Install Jupyter  Download the  VIVA Jupyter Notebook .  Follow the in-notebook instructions to generate your plots.", 
            "title": "Jupyter Notebook"
        }, 
        {
            "location": "/installation/#using-docker-and-docker-compose", 
            "text": "If you don't want to install Julia and VariantVisualization, you can use the Docker images provided. For that, first  install Docker .", 
            "title": "Using Docker and Docker Compose"
        }, 
        {
            "location": "/installation/#using-docker", 
            "text": "We provide two images, one with a Jupyter Notebook and one with a command line script for VIVA.  Create a project folder and navigate to it:  mkdir project_x cd  project_x  Make sure to add your project VCF files to that folder. That directory will be mapped to  /notebook/data  inside of the container.  Then, to run the Jupyter Notebook, from the terminal or Windows PowerShell:  docker run --rm -p  8888 :8888 -e  JUPYTER_ENABLE_LAB = yes -v  $PWD :/notebook/data compbiocore/viva-notebook  Go to  http://0.0.0.0:8888/?token= enter token here  Click here  for more information about Jupyter Docker Images.  To run VIVA Command Line Tool:  On Mac or Linux:  docker run -it --rm -v  $PWD :/data compbiocore/viva-cli arg1 arg2 arg3  On Windows:  docker run -it --rm -v  ${ pwd } :/data compbiocore/viva-cli arg1 arg2 arg3", 
            "title": "Using Docker"
        }, 
        {
            "location": "/installation/#using-docker-compose", 
            "text": "To run the images with Docker Compose, copy the  docker-compose.yml  file to a local directory. From that same directory, run the commandas below.  !!! Note   Your current directory will mount to  /notebook/data  in the notebook image and to  /data  in the CLI image.   Notebook   docker-compose up viva-notebook   Command Line Tool   docker-compose run viva -f /data/file.vcf arg2 arg3 ...", 
            "title": "Using Docker Compose"
        }, 
        {
            "location": "/installation/#latest-features", 
            "text": "To stay up to date with cutting edge development features install VariantVisualization.jl from the Master branch.  Using git from the command line:  git   clone   https : // github . com / compbiocore / VariantVisualization . jl   or from the Julia REPL (useful if using the PowerShell and don't have git installed):  using   Pkg  Pkg . clone ( https://github.com/compbiocore/VariantVisualization.jl )", 
            "title": "Latest Features"
        }, 
        {
            "location": "/installation/#for-developers", 
            "text": "VIVA Jupyter notebook and the VIVA the command line tool are built with functions contained in our VariantVisualization.jl package.  Developers may contribute to these open source tools by using  functions contained within VariantVisualization.jl  which are carefully documented with docstrings.  We have included in-line comments within the code for the  VIVA command line tool .  The  VIVA Jupyter notebook  is powered by a  main function  which takes arguments defined by the user in the notebook. We welcome users to post in issues to request a new feature or bug fix.", 
            "title": "For Developers"
        }, 
        {
            "location": "/filtering_vcf/", 
            "text": "Variant Record and Sample Selection\n\n\nGeneral Note:s: Extracting and Reshaping VCF Data\n\n\nVIVA supports flexible filters for selecting variant records for visualization.\n\n\nAdditionally, the tool supports selecting and grouping samples by common traits for visualization.\n\n\nGrouping samples is particularly useful for exploring phenotypic and genotypic associations, displaying differential distribution of variants between groups of samples, and identifying batch effect on coverage between groups of samples in variant analysis experiments.\n\n\nChoose a VCF file to Visualize \nREQUIRED\n\n\nSpecify filename of VCF file.\n\n\nflags\n: \n--vcf_file\n, \n-f\n\n\narguments\n: Provide VCF filename (or filepath to VCF file if the file is not in the curret working directory).\n\n\nNote\n: This is the \nonly required argument\n for VIVA. If you run with none of the other options, default options will be used. These default options are described in detail below.\n\n\njulia\n \nVIVA\n \n-\nf\n \nexample\n.\nvcf\n \n[\nOPTIONS\n]\n\n\n\n\n\n\nSelecting Variant Records\n\n\nVIVA offers three filters for selecting variant records to visualize from VCF files.\n\n\nIt is recommended to use one or a combination of these filters to reduce the number of variant records extracted from the VCF for plotting. This is recommended for reasons related to technical limitations and practical visual interpretation. The number of variant records able to be plotted is limited by both the user's available computing resources as well as the number of pixels in their display for displaying data points. While it is possible to visualize many thousands of variant records at one time with VIVA, \nwe recommend visualizing fewer than 2000 variants\n so that all data points can be displayed that your computing resources are not overburdened. However, VIVA is capable of extracting and plotting hundreds of thousands of data points from VCF files.\n\n\nGenomic range\n\n\nSelect rows within a given genomic range.\n\n\nflags\n: \n--genomic_range\n, \n-r\n\n\narguments\n: Specify genomic range within a single chromosome in format \nchr4:20000000-30000000\n\n\nNote\n: To visualize genomic ranges within multiple chromosomes, you may create a batch script to run VIVA multiple times using different genomic ranges.\n\n\njulia\n \nVIVA\n \n-\nf\n \nexample\n.\nvcf\n \n-\nr\n \nchr1\n:\n20000\n-\n30000000\n\n\n\n\n\n\nVariant list\n\n\nSelect variants matching list of chromosomal positions.\n\n\nflags\n: \n--positions_list\n, \n-l\n\n\narguments\n: Provide filename of text file formatted with two columns in .csv format as an argument. There should be a header row with \"chr\" and \"start\" in row 1 of column 1 and 2 respectively. Column 1 should contain chromosome number in the format \"chr1\" or \"1\" and should match the syntax of the VCF file (that is, if the VCF file lists chromosome numbers in the form \"chrX\", use \"chrX\" in your positions list, not \"X\") You can find an example of this file \nhere\n\")\n\n\njulia\n \nVIVA\n \n-\nf\n \nexample\n.\nvcf\n \n-\nl\n \nexample_positions_list.txt\n\n\n\n\n\n\nPass filter\n\n\nSelect rows that passed filters originally set during variant calling and VCF file generation. Selects records with \"PASS\" in the FILTER column of the VCF file. This filter alone is often not stringent enough to reduce the number of variants for plotting and visual interpretation. For analyzing large VCF files with many \"passed\" filter records, use genomic range,\n\n\nflags\n: \n--pass_filter\n, \n-p\n\n\narguments\n: This flag is a positional argument and does not take options.\n\n\njulia\n \nVIVA\n \n-\nf\n \nexample\n.\nvcf\n \n-\np\n\n\n\n\n\n\nSelecting and Grouping Samples\n\n\nGroup samples by sample metadata traits\n\n\nGroup sample columns using your sample metadata and visualize metadata attributes in a colorbar above heatmap visualizations.\n\n\nflags\n: \n--group_samples\n, \n-g\n\n\narguments\n: This flag takes two arguments. First provide filename of sample\nmetadata\nmatrix.csv file. Second, enter the trait to group by as it appears in column 1 of the matrix.\n\n\n\n\nUse cases for sample grouping\n\n\nVIVA supports grouping samples for visualization using any user-supplied binary metadata attributes and visualizes these in a colorbar above heatmap visualizations.\n\n\nThis is broadly useful for purposes such as exploring and presenting \nphenotypic and genotypic associations\n, \nidentifying batch effect on coverage\n, or \nvisualizing differential variant incidence\n between two groups of samples (such as cases and controls).\n\n\n\n\nInput file formatting\n\n\nSample metadata matrix is a user generated input file and should be formatted in a table of sample ids and binary metadata traits (such as case,control or treatment1,treatment2 or seq\nsite\n1,seq\nsite\n2). An example of formatting for this table can be found \nhere\n. \n\n\nSample ids must match those found in the VCF file but do not need to be in the same order as they appear in the VCF header. Additionally, if the user would like to use the \u2013select_samples option, sample ids must match the sample selection list.\n\n\nMetadata traits are stored as rownames in the first column of the table and should be binary traits seperated by a comma (like \"case,control\"). For each metadata trait, samples should be labeled with \"1\" or \"2\" to correspond with the first and second group of the trait respectively (e.g. 1 = case and 2 = control).\n\n\nThis matrix should be saved as a comma delimited .csv file. Microsoft Excel is commonly used for this purpose, but sometimes creates extra delimiter characters in the output file that produce an error in VIVA. You can check to make sure the .csv file was saved properly by opening the file with a text editor such as BBEdit to inspect for and delete empty values or extra delimiter characters at the end of each row.\n\n\njulia\n \nVIVA\n \n-\nf\n \nexample\n.\nvcf\n \n-\ng\n \nsample_metadata_matrix\n.\ncsv\n \ncase\n,\ncontrol\n\n\n\n\n\n\nSelect samples to include in visualization\n\n\nSelect specific samples to be extracted from the VCF for visualization.\n\n\nflags\n: \n--select_samples\n\n\narguments\n: Provide filename or filepath to tab delimited list of sample names to include in visualization as an argument. An example of this list can be found \nhere\n.\n\n\nNote\n: To use the sample selection feature in combination with the sample grouping feature, the sample metadata matrix must only contain the sample ids to be selected.\n\n\njulia\n \nVIVA\n \n-\nf\n \nexample\n.\nvcf\n \n--select_samples select_samples_list.txt", 
            "title": "Filtering Your VCF File"
        }, 
        {
            "location": "/filtering_vcf/#variant-record-and-sample-selection", 
            "text": "", 
            "title": "Variant Record and Sample Selection"
        }, 
        {
            "location": "/filtering_vcf/#general-notes-extracting-and-reshaping-vcf-data", 
            "text": "VIVA supports flexible filters for selecting variant records for visualization.  Additionally, the tool supports selecting and grouping samples by common traits for visualization.  Grouping samples is particularly useful for exploring phenotypic and genotypic associations, displaying differential distribution of variants between groups of samples, and identifying batch effect on coverage between groups of samples in variant analysis experiments.", 
            "title": "General Note:s: Extracting and Reshaping VCF Data"
        }, 
        {
            "location": "/filtering_vcf/#choose-a-vcf-file-to-visualize-required", 
            "text": "Specify filename of VCF file.  flags :  --vcf_file ,  -f  arguments : Provide VCF filename (or filepath to VCF file if the file is not in the curret working directory).  Note : This is the  only required argument  for VIVA. If you run with none of the other options, default options will be used. These default options are described in detail below.  julia   VIVA   - f   example . vcf   [ OPTIONS ]", 
            "title": "Choose a VCF file to Visualize REQUIRED"
        }, 
        {
            "location": "/filtering_vcf/#selecting-variant-records", 
            "text": "VIVA offers three filters for selecting variant records to visualize from VCF files.  It is recommended to use one or a combination of these filters to reduce the number of variant records extracted from the VCF for plotting. This is recommended for reasons related to technical limitations and practical visual interpretation. The number of variant records able to be plotted is limited by both the user's available computing resources as well as the number of pixels in their display for displaying data points. While it is possible to visualize many thousands of variant records at one time with VIVA,  we recommend visualizing fewer than 2000 variants  so that all data points can be displayed that your computing resources are not overburdened. However, VIVA is capable of extracting and plotting hundreds of thousands of data points from VCF files.", 
            "title": "Selecting Variant Records"
        }, 
        {
            "location": "/filtering_vcf/#genomic-range", 
            "text": "Select rows within a given genomic range.  flags :  --genomic_range ,  -r  arguments : Specify genomic range within a single chromosome in format  chr4:20000000-30000000  Note : To visualize genomic ranges within multiple chromosomes, you may create a batch script to run VIVA multiple times using different genomic ranges.  julia   VIVA   - f   example . vcf   - r   chr1 : 20000 - 30000000", 
            "title": "Genomic range"
        }, 
        {
            "location": "/filtering_vcf/#variant-list", 
            "text": "Select variants matching list of chromosomal positions.  flags :  --positions_list ,  -l  arguments : Provide filename of text file formatted with two columns in .csv format as an argument. There should be a header row with \"chr\" and \"start\" in row 1 of column 1 and 2 respectively. Column 1 should contain chromosome number in the format \"chr1\" or \"1\" and should match the syntax of the VCF file (that is, if the VCF file lists chromosome numbers in the form \"chrX\", use \"chrX\" in your positions list, not \"X\") You can find an example of this file  here \")  julia   VIVA   - f   example . vcf   - l   example_positions_list.txt", 
            "title": "Variant list"
        }, 
        {
            "location": "/filtering_vcf/#pass-filter", 
            "text": "Select rows that passed filters originally set during variant calling and VCF file generation. Selects records with \"PASS\" in the FILTER column of the VCF file. This filter alone is often not stringent enough to reduce the number of variants for plotting and visual interpretation. For analyzing large VCF files with many \"passed\" filter records, use genomic range,  flags :  --pass_filter ,  -p  arguments : This flag is a positional argument and does not take options.  julia   VIVA   - f   example . vcf   - p", 
            "title": "Pass filter"
        }, 
        {
            "location": "/filtering_vcf/#selecting-and-grouping-samples", 
            "text": "", 
            "title": "Selecting and Grouping Samples"
        }, 
        {
            "location": "/filtering_vcf/#group-samples-by-sample-metadata-traits", 
            "text": "Group sample columns using your sample metadata and visualize metadata attributes in a colorbar above heatmap visualizations.  flags :  --group_samples ,  -g  arguments : This flag takes two arguments. First provide filename of sample metadata matrix.csv file. Second, enter the trait to group by as it appears in column 1 of the matrix.", 
            "title": "Group samples by sample metadata traits"
        }, 
        {
            "location": "/filtering_vcf/#use-cases-for-sample-grouping", 
            "text": "VIVA supports grouping samples for visualization using any user-supplied binary metadata attributes and visualizes these in a colorbar above heatmap visualizations.  This is broadly useful for purposes such as exploring and presenting  phenotypic and genotypic associations ,  identifying batch effect on coverage , or  visualizing differential variant incidence  between two groups of samples (such as cases and controls).", 
            "title": "Use cases for sample grouping"
        }, 
        {
            "location": "/filtering_vcf/#input-file-formatting", 
            "text": "Sample metadata matrix is a user generated input file and should be formatted in a table of sample ids and binary metadata traits (such as case,control or treatment1,treatment2 or seq site 1,seq site 2). An example of formatting for this table can be found  here .   Sample ids must match those found in the VCF file but do not need to be in the same order as they appear in the VCF header. Additionally, if the user would like to use the \u2013select_samples option, sample ids must match the sample selection list.  Metadata traits are stored as rownames in the first column of the table and should be binary traits seperated by a comma (like \"case,control\"). For each metadata trait, samples should be labeled with \"1\" or \"2\" to correspond with the first and second group of the trait respectively (e.g. 1 = case and 2 = control).  This matrix should be saved as a comma delimited .csv file. Microsoft Excel is commonly used for this purpose, but sometimes creates extra delimiter characters in the output file that produce an error in VIVA. You can check to make sure the .csv file was saved properly by opening the file with a text editor such as BBEdit to inspect for and delete empty values or extra delimiter characters at the end of each row.  julia   VIVA   - f   example . vcf   - g   sample_metadata_matrix . csv   case , control", 
            "title": "Input file formatting"
        }, 
        {
            "location": "/filtering_vcf/#select-samples-to-include-in-visualization", 
            "text": "Select specific samples to be extracted from the VCF for visualization.  flags :  --select_samples  arguments : Provide filename or filepath to tab delimited list of sample names to include in visualization as an argument. An example of this list can be found  here .  Note : To use the sample selection feature in combination with the sample grouping feature, the sample metadata matrix must only contain the sample ids to be selected.  julia   VIVA   - f   example . vcf   --select_samples select_samples_list.txt", 
            "title": "Select samples to include in visualization"
        }, 
        {
            "location": "/plotting/", 
            "text": "Plotting\n\n\nGeneral Notes: visualization options\n\n\nHere we describe VIVA options for plotting. All plots can be generated in a single command.\n\n\nVIVA orders all variants by chromosomal location for plotting. \n\n\nVIVA graphics are generated with PlotlyJS.jl. Graphics can be saved in \nHTML\n, \nPDF\n, \nSVG\n, \nPNG\n, and \nEPS\n formats. \n\n\nTo create \ninteractive visualization\n files, save VIVA's graphics in HTML format. These files are sharable and support cursor hoverlabels, zooming, panning, and PNG screen capture. Cursor hoverlabel displays genomic position, sample id, and data value for each data point in heatmap and scatter plot visualizations. We recommend saving graphics to HTML for data exploration. \n\n\nTo create \npublication quality, scalable graphics\n for presentations and publications, we recommend saving graphics as PDF. \n\n\n\n\nGenotype and read depth heatmaps\n\n\nPlot a categorical heatmap of genotype values and a continuous value heatmap of read depth (coverage) values.\n\n\nflags\n: \n--heatmap\n,\n-m\n\n\narguments\n: \ngenotype\n, \nread_depth\n, or \ngenotype,read_depth\n\n\ndefault: \ngenotype,read_depth\n (plots both)\n\n\njulia\n \nVIVA\n \n-\nf\n \nexample\n.\nvcf\n \n-\nm\n \ngenotype\n\n\n\n\n\n\n\n\nAverage read depth scatter plots\n\n\nGenerate scatter plots of average read depths across either samples or variants. Caps outlier read depth values at 100 to optimize resolution of visualization of values under 50. \n\n\nflags\n: \n--avg_dp\n\n\narguments\n: \nsamples\n, \nvariants\n, or \nsamples,variants\n\n\ndefault: \nnone\n\n\njulia\n \nVIVA\n \n-\nf\n \nexample\n.\nvcf\n \n--avg_dp variants\n\n\n\n\n\n\n\n\nSave file format\n\n\nSpecify file format you wish to save all graphics as (eg. pdf, html, png). [REQUIRED]\n\n\nflags\n: \n--save_format\n, \n-s\n  \n\n\narguments\n: \nhtml\n, \npdf\n, \nsvg\n, \npng\n, \neps\n\n\ndefault: \nhtml\n\n\njulia\n \nVIVA\n \n-\nf\n \nexample\n.\nvcf\n \n--avg_dp variants\n\n\n\n\n\n\n\n\nOutput directory\n\n\nSpecify output directory for saving all graphics. If directory doesn't exist, it creates the directory within the working directory. Defaults to \"output.\"\n\n\nSelect directory to save output files. If path doesn't exist, creates new directory. \n\n\nflags\n: \n--output_directory\n, \n-o\n\n\narguments\n: filepath\n\n\ndefault: \noutput\n\n\njulia\n \nVIVA\n \n-\nf\n \nexample\n.\nvcf\n \n-\no\n \nmy_output_directory\n\n\n\n\n\n\n\n\nTitle\n\n\nSpecify title to display on heatmap and use as filename for saving heatmap files. Use underscores instead of spaces. Underscores will be replaced with spaces in the heatmap title.\n\n\nflags\n: \n--heatmap_title\n, \n-t\n\n\narguments\n: title_text\n\n\ndefault: original vcf filename\n\n\njulia\n \nVIVA\n \n-\nf\n \nexample\n.\nvcf\n \n-\nt\n \nyour_heatmap_title\n\n\n\n\n\n\n\n\nY-axis label options\n\n\nChoose an option for displaying y-axis ticklabels showing the genomic position of variants on heatmaps and scatter plots. \n\n\nflags\n: \n--y_axis_labels\n, \n-y\n\n\narguments\n: \nchromosomes\n, \npositions\n, \nhoverlabels_only\n\n\nchromosomes\n separates chromosomes by adding chromosome label on the first variant of each new chromosome.  \npositions\n labels every variant position (recommended only for visualizing a few variants e.g. \n20) \nhoverlabels_only\n no genomic position labels \n\n\ndefault: \nchromosomes\n\n\njulia\n \nVIVA\n \n-\nf\n \nexample\n.\nvcf\n \n`-y`\n \n`hoverlabels_only`\n\n\n\n\n\n\n\n\nX-axis label options\n\n\nChoose an option for displaying x-axis ticklabels showing the sample id of samples included heatmaps and scatter plots. \n\n\nflags\n: \n--x_axis_labels\n.\nx\n\n\narguments\n: if \ntrue\n, displays samples names labels on x-axis. if \nfalse\n, does not display x-axis sample labels.\n\n\ndefault: \ntrue\n\n\njulia\n \nVIVA\n \n-\nf\n \nexample\n.\nvcf\n \n`-\nx\n`\n\n\n\n\n\n\n\n\nExport heatmap data as numerical array\n\n\nSave input array to heatmap function with column and row labels. \n\n\nSpecifically, saves numerical array of genotype or read depth values for selected variants and samples as a .csv table with genomic positions and sample names for row names and column names respectively.\n\n\nflags\n: \n--num_array\n, \n-n\n\n\narguments\n: none, this is a positional argument.\n\n\njulia\n \nVIVA\n \n-\nf\n \nexample\n.\nvcf\n \n`-\nn\n`\n \n\n\n\n\n\njulia\n \nVIVA\n \n-\nf\n \nexample\n.\nvcf\n \n`-\nx\n`\n\n\n\n\n\n\n\n\nMake HTML plots shareable\n\n\nMake HTML plots shareable by saving HTML supporting files remotely on the internet rather than on the users local filesystem. \n\n\nThis allows sending HTML output files to others who don't have VIVA installed on their computers. However, in order to open HTML files saved with this option engaged, users will need to be connected to the internet. \n\n\nWithout calling this feature, HTML outputs can be opened without internet connection but only on the computer where the plots were generated.\n\n\nflags\n: \n--save_remotely\n\n\narguments\n: none, this is a positional argument.\n\n\njulia\n \nVIVA\n \n-\nf\n \nexample\n.\nvcf\n \n`\n--save_remotely`", 
            "title": "Making Plots"
        }, 
        {
            "location": "/plotting/#plotting", 
            "text": "", 
            "title": "Plotting"
        }, 
        {
            "location": "/plotting/#general-notes-visualization-options", 
            "text": "Here we describe VIVA options for plotting. All plots can be generated in a single command.  VIVA orders all variants by chromosomal location for plotting.   VIVA graphics are generated with PlotlyJS.jl. Graphics can be saved in  HTML ,  PDF ,  SVG ,  PNG , and  EPS  formats.   To create  interactive visualization  files, save VIVA's graphics in HTML format. These files are sharable and support cursor hoverlabels, zooming, panning, and PNG screen capture. Cursor hoverlabel displays genomic position, sample id, and data value for each data point in heatmap and scatter plot visualizations. We recommend saving graphics to HTML for data exploration.   To create  publication quality, scalable graphics  for presentations and publications, we recommend saving graphics as PDF.", 
            "title": "General Notes: visualization options"
        }, 
        {
            "location": "/plotting/#genotype-and-read-depth-heatmaps", 
            "text": "Plot a categorical heatmap of genotype values and a continuous value heatmap of read depth (coverage) values.  flags :  --heatmap , -m  arguments :  genotype ,  read_depth , or  genotype,read_depth  default:  genotype,read_depth  (plots both)  julia   VIVA   - f   example . vcf   - m   genotype", 
            "title": "Genotype and read depth heatmaps"
        }, 
        {
            "location": "/plotting/#average-read-depth-scatter-plots", 
            "text": "Generate scatter plots of average read depths across either samples or variants. Caps outlier read depth values at 100 to optimize resolution of visualization of values under 50.   flags :  --avg_dp  arguments :  samples ,  variants , or  samples,variants  default:  none  julia   VIVA   - f   example . vcf   --avg_dp variants", 
            "title": "Average read depth scatter plots"
        }, 
        {
            "location": "/plotting/#save-file-format", 
            "text": "Specify file format you wish to save all graphics as (eg. pdf, html, png). [REQUIRED]  flags :  --save_format ,  -s     arguments :  html ,  pdf ,  svg ,  png ,  eps  default:  html  julia   VIVA   - f   example . vcf   --avg_dp variants", 
            "title": "Save file format"
        }, 
        {
            "location": "/plotting/#output-directory", 
            "text": "Specify output directory for saving all graphics. If directory doesn't exist, it creates the directory within the working directory. Defaults to \"output.\"  Select directory to save output files. If path doesn't exist, creates new directory.   flags :  --output_directory ,  -o  arguments : filepath  default:  output  julia   VIVA   - f   example . vcf   - o   my_output_directory", 
            "title": "Output directory"
        }, 
        {
            "location": "/plotting/#title", 
            "text": "Specify title to display on heatmap and use as filename for saving heatmap files. Use underscores instead of spaces. Underscores will be replaced with spaces in the heatmap title.  flags :  --heatmap_title ,  -t  arguments : title_text  default: original vcf filename  julia   VIVA   - f   example . vcf   - t   your_heatmap_title", 
            "title": "Title"
        }, 
        {
            "location": "/plotting/#y-axis-label-options", 
            "text": "Choose an option for displaying y-axis ticklabels showing the genomic position of variants on heatmaps and scatter plots.   flags :  --y_axis_labels ,  -y  arguments :  chromosomes ,  positions ,  hoverlabels_only  chromosomes  separates chromosomes by adding chromosome label on the first variant of each new chromosome.   positions  labels every variant position (recommended only for visualizing a few variants e.g.  20)  hoverlabels_only  no genomic position labels   default:  chromosomes  julia   VIVA   - f   example . vcf   `-y`   `hoverlabels_only`", 
            "title": "Y-axis label options"
        }, 
        {
            "location": "/plotting/#x-axis-label-options", 
            "text": "Choose an option for displaying x-axis ticklabels showing the sample id of samples included heatmaps and scatter plots.   flags :  --x_axis_labels . x  arguments : if  true , displays samples names labels on x-axis. if  false , does not display x-axis sample labels.  default:  true  julia   VIVA   - f   example . vcf   `- x `", 
            "title": "X-axis label options"
        }, 
        {
            "location": "/plotting/#export-heatmap-data-as-numerical-array", 
            "text": "Save input array to heatmap function with column and row labels.   Specifically, saves numerical array of genotype or read depth values for selected variants and samples as a .csv table with genomic positions and sample names for row names and column names respectively.  flags :  --num_array ,  -n  arguments : none, this is a positional argument.  julia   VIVA   - f   example . vcf   `- n `    julia   VIVA   - f   example . vcf   `- x `", 
            "title": "Export heatmap data as numerical array"
        }, 
        {
            "location": "/plotting/#make-html-plots-shareable", 
            "text": "Make HTML plots shareable by saving HTML supporting files remotely on the internet rather than on the users local filesystem.   This allows sending HTML output files to others who don't have VIVA installed on their computers. However, in order to open HTML files saved with this option engaged, users will need to be connected to the internet.   Without calling this feature, HTML outputs can be opened without internet connection but only on the computer where the plots were generated.  flags :  --save_remotely  arguments : none, this is a positional argument.  julia   VIVA   - f   example . vcf   ` --save_remotely`", 
            "title": "Make HTML plots shareable"
        }, 
        {
            "location": "/examples/", 
            "text": "Examples\n\n\nTo run examples:\n\n\n\n\nInstall Julia and the VariantVisualization.jl package\n\n\nDownload the five test files found \nhere\n and put them into a working directory with the viva script.\n\n\nOpen the command line (Terminal or Powershell), copy the provided commands into the command line prompt, and press enter.\n\n\nYour first viva run will take longer than usual (several minutes) because of the way Julia compiles packages. All subsequent runs will be much faster. Each example should take 30-50 seconds to run and you should see the same outputs as those below each demo.\n\n\n\n\nWe encourage you to also run these examples without the flag \n-s png\n to save and view interactive HTML graphics with cursor hovertext, zooming, panning, and screen capture features. View HTML graphics in your browser by opening the HTML file.\n\n\n\n\nDefault Options\n\n\nRunning viva with no options produces heatmaps of genotype and read depth values for all samples and variant positions in the VCF file with default options. You can read about viva's default settings \nhere\n\n\njulia\n \nviva\n \n-\nf\n \ntest_4X_191\n.\nvcf\n \n-\nt\n \nDefault_Options\n \n-\ns\n \npng\n\n\n\n\n\n\n\n\n\n\n\n\nGrouping Samples by Metadata Traits and Generating all Four Plots\n\n\nGroup samples by sequencing facility and generate heatmaps of genotype and read depth values as well as scatter plots of average read depth for both all selected samples and all selected variant positions. \n\n\nYou can find grouping options \nhere\n.\n\n\njulia\n \nviva\n \n-\nf\n \ntest_4X_191\n.\nvcf\n \n-\nt\n \nGrouped_by_Sequencing_Site\n \n-\ng\n \nsample_metadata_matrix\n.\ncsv\n \nseq_site_1\n,\nseq_site_2\n \n--avg_dp variant,sample -s png\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGenomic Range and Samples Selection - Genotype and Read Depth Heatmaps with Variant Position Labels\n\n\nGenerate heatmaps of genotype and read depth values of variants selected within a genomic range, in this case, chromosome 4, nucleotides 200000-500000, with y-axis variant position labels.\n\n\njulia\n \nviva\n \n-\nf\n \ntest_4X_191\n.\nvcf\n \n-\nt\n \nGenomic_Range\n \n-\nr\n \nchr4\n:\n3076150\n-\n3076390\n \n-\ny\n \npositions\n \n--select_samples select_samples_list.txt -s png", 
            "title": "Examples"
        }, 
        {
            "location": "/examples/#examples", 
            "text": "To run examples:   Install Julia and the VariantVisualization.jl package  Download the five test files found  here  and put them into a working directory with the viva script.  Open the command line (Terminal or Powershell), copy the provided commands into the command line prompt, and press enter.  Your first viva run will take longer than usual (several minutes) because of the way Julia compiles packages. All subsequent runs will be much faster. Each example should take 30-50 seconds to run and you should see the same outputs as those below each demo.   We encourage you to also run these examples without the flag  -s png  to save and view interactive HTML graphics with cursor hovertext, zooming, panning, and screen capture features. View HTML graphics in your browser by opening the HTML file.", 
            "title": "Examples"
        }, 
        {
            "location": "/examples/#default-options", 
            "text": "Running viva with no options produces heatmaps of genotype and read depth values for all samples and variant positions in the VCF file with default options. You can read about viva's default settings  here  julia   viva   - f   test_4X_191 . vcf   - t   Default_Options   - s   png", 
            "title": "Default Options"
        }, 
        {
            "location": "/examples/#grouping-samples-by-metadata-traits-and-generating-all-four-plots", 
            "text": "Group samples by sequencing facility and generate heatmaps of genotype and read depth values as well as scatter plots of average read depth for both all selected samples and all selected variant positions.   You can find grouping options  here .  julia   viva   - f   test_4X_191 . vcf   - t   Grouped_by_Sequencing_Site   - g   sample_metadata_matrix . csv   seq_site_1 , seq_site_2   --avg_dp variant,sample -s png", 
            "title": "Grouping Samples by Metadata Traits and Generating all Four Plots"
        }, 
        {
            "location": "/examples/#genomic-range-and-samples-selection-genotype-and-read-depth-heatmaps-with-variant-position-labels", 
            "text": "Generate heatmaps of genotype and read depth values of variants selected within a genomic range, in this case, chromosome 4, nucleotides 200000-500000, with y-axis variant position labels.  julia   viva   - f   test_4X_191 . vcf   - t   Genomic_Range   - r   chr4 : 3076150 - 3076390   - y   positions   --select_samples select_samples_list.txt -s png", 
            "title": "Genomic Range and Samples Selection - Genotype and Read Depth Heatmaps with Variant Position Labels"
        }, 
        {
            "location": "/api/", 
            "text": "Import\n\n\nusing\n \nVariantVisualization\n\n\n\n\n\n\n\n\nIndex\n\n\n\n\nVariantVisualization.add_pheno_matrix_to_dp_data_for_plotting\n\n\nVariantVisualization.add_pheno_matrix_to_gt_data_for_plotting\n\n\nVariantVisualization.avg_dp_samples\n\n\nVariantVisualization.avg_dp_variant\n\n\nVariantVisualization.avg_sample_dp_scatter\n\n\nVariantVisualization.avg_variant_dp_line_chart\n\n\nVariantVisualization.build_set_from_list\n\n\nVariantVisualization.checkfor_outputdirectory\n\n\nVariantVisualization.chromosome_label_generator\n\n\nVariantVisualization.clean_column1!\n\n\nVariantVisualization.clean_column1_siglist!\n\n\nVariantVisualization.combined_all_genotype_array_functions\n\n\nVariantVisualization.combined_all_read_depth_array_functions\n\n\nVariantVisualization.combined_all_read_depth_array_functions_for_avg_dp\n\n\nVariantVisualization.create_chr_dict\n\n\nVariantVisualization.define_geno_dict\n\n\nVariantVisualization.dp_heatmap2\n\n\nVariantVisualization.dp_heatmap2_with_groups\n\n\nVariantVisualization.find_group_label_indices\n\n\nVariantVisualization.generate_chromosome_positions_for_hover_labels\n\n\nVariantVisualization.generate_genotype_array\n\n\nVariantVisualization.generate_hover_text_array\n\n\nVariantVisualization.generate_hover_text_array_grouped\n\n\nVariantVisualization.generate_legend_increments_grouped\n\n\nVariantVisualization.generate_legend_increments_ungrouped\n\n\nVariantVisualization.genomic_range_siglist_filter\n\n\nVariantVisualization.genotype_heatmap2_new_legend\n\n\nVariantVisualization.genotype_heatmap_with_groups\n\n\nVariantVisualization.get_sample_names\n\n\nVariantVisualization.index_vcf\n\n\nVariantVisualization.io_genomic_range_vcf_filter\n\n\nVariantVisualization.io_pass_filter\n\n\nVariantVisualization.io_sig_list_vcf_filter\n\n\nVariantVisualization.jupyter_main\n\n\nVariantVisualization.list_sample_names_low_dp\n\n\nVariantVisualization.list_variant_positions_low_dp\n\n\nVariantVisualization.load_siglist\n\n\nVariantVisualization.make_chromosome_labels\n\n\nVariantVisualization.match_siglist_to_index\n\n\nVariantVisualization.pass_genomic_range_filter\n\n\nVariantVisualization.pass_genomic_range_siglist_filter\n\n\nVariantVisualization.pass_siglist_filter\n\n\nVariantVisualization.process_plot_inputs\n\n\nVariantVisualization.process_plot_inputs_for_grouped_data\n\n\nVariantVisualization.read_depth_threshhold\n\n\nVariantVisualization.returnXY_column1!\n\n\nVariantVisualization.returnXY_column1_siglist!\n\n\nVariantVisualization.save_graphic\n\n\nVariantVisualization.save_numerical_array\n\n\nVariantVisualization.select_columns\n\n\nVariantVisualization.sort_genotype_array\n\n\nVariantVisualization.sortcols_by_phenotype_matrix\n\n\nVariantVisualization.test_parse_main\n\n\nVariantVisualization.translate_genotype_to_num_array\n\n\nVariantVisualization.translate_readdepth_strings_to_num_array\n\n\nVariantVisualization.translate_readdepth_strings_to_num_array_for_avg_dp\n\n\n\n\n\n\nFunctions\n\n\n#\n\n\nVariantVisualization.add_pheno_matrix_to_dp_data_for_plotting\n \n \nMethod\n.\n\n\nadd_pheno_matrix_to_dp_data_for_plotting\n(\npheno_matrix\n,\ndp_num_array\n,\ntrait_labels\n,\nchrom_label_info\n,\nnumber_rows\n)\n\n\n\n\n\n\nadd the pheno matrix used to group samples to the data array for input into plotting functions. Resizes the pheno matrix to maintain correct dimensions for heatmap viz by finding value=0.05\nnumber\nrows*data to multiply each pheno row by before vcat.\n\n\nsource\n\n\n#\n\n\nVariantVisualization.add_pheno_matrix_to_gt_data_for_plotting\n \n \nMethod\n.\n\n\nadd_pheno_matrix_to_gt_data_for_plotting\n(\npheno_matrix\n,\ngt_num_array\n,\ntrait_labels\n,\nchrom_label_info\n,\nnumber_rows\n)\n\n\n\n\n\n\nadd the pheno matrix used to group samples to the data array for input into plotting functions. Resizes the pheno matrix to maintain correct dimensions for heatmap viz by finding value=0.05\nnumber\nrows*data to multiply each pheno row by before vcat.\n\n\nsource\n\n\n#\n\n\nVariantVisualization.avg_dp_samples\n \n \nMethod\n.\n\n\navg_dp_samples\n(\ndp_num_array\n::\nArray\n{\nInt64\n,\n2\n})\n\n\n\n\n\n\ncreate sample\navg\nlist vector that lists averages of read depth for each sample for input into avg\nsample\ndp\nline\nchart(sample\navg\nlist) dp\nnum\narray must contain dp values as Int64 and be without chromosome position columns\n\n\nsource\n\n\n#\n\n\nVariantVisualization.avg_dp_variant\n \n \nMethod\n.\n\n\navg_dp_variant\n(\ndp_num_array\n::\nArray\n{\nInt64\n,\n2\n})\n\n\n\n\n\n\ncreate variant\navg\nlist vector that lists averages of read depth for each variant for input into avg\nvariant\ndp\nline\nchart(variant\navg\nlist)\n\n\nsource\n\n\n#\n\n\nVariantVisualization.avg_sample_dp_scatter\n \n \nMethod\n.\n\n\navg_sample_dp_scatter\n(\nsample_avg_list\n::\nArray\n{\nFloat64\n,\n1\n},\nsample_names\n,\nx_axis_label_option\n)\n\n\n\n\n\n\ngenerate line chart of average read depths of each sample.\n\n\nsource\n\n\n#\n\n\nVariantVisualization.avg_variant_dp_line_chart\n \n \nMethod\n.\n\n\navg_variant_dp_line_chart\n(\nvariant_avg_list\n::\nArray\n{\nFloat64\n,\n1\n},\nchr_pos_tuple_list\n,\ny_axis_label_option\n,\nchrom_label_info\n)\n\n\n\n\n\n\ngenerate line chart of average read depths of each variant.\n\n\nsource\n\n\n#\n\n\nVariantVisualization.build_set_from_list\n \n \nMethod\n.\n\n\nbuild_set_from_list\n(\nsig_list\n::\nArray\n{\nString\n,\n2\n})\n\n\n\n\n\n\nbuild set of tuples of chrom and pos of each record in vcf for use in sig\nlist\nfilters. Method 3: build list from input variant locations in String chromosomes only (chrX,Y,M)\n\n\nsource\n\n\n#\n\n\nVariantVisualization.checkfor_outputdirectory\n \n \nMethod\n.\n\n\ncheckfor_outputdirectory\n(\npath\n::\nString\n)\n\n\n\n\n\n\nChecks to see if output directory exists already. If it doesn't, it creates the new directory to write output files to.\n\n\nsource\n\n\n#\n\n\nVariantVisualization.chromosome_label_generator\n \n \nMethod\n.\n\n\nchromosome_label_generator\n(\nchromosome_labels\n::\nArray\n{\nAny\n,\n1\n})\n\n\n\n\n\n\nReturns vector of chr labels and indices to mark chromosomes in plotly heatmap Specifically, saves indexes and chrom labels in vectors to pass into heatmap function to ticvals and tictext respectively. Input is either gt\nchromosome\nlabels or dp\nchromosome\nlabels from translate\ngt/dp\nto\nnum\narray()\n\n\nsource\n\n\n#\n\n\nVariantVisualization.clean_column1!\n \n \nMethod\n.\n\n\nclean_column1!\n(\nmatrix_with_chr_column\n)\n\n\n\n\n\n\nReplace String \"X\",\"Y\",\"M\" from chromosome column with 23,24,25 respectively so variants can be sorted by descending chr position for plotting\n\n\nsource\n\n\n#\n\n\nVariantVisualization.clean_column1_siglist!\n \n \nMethod\n.\n\n\nclean_column1_siglist!\n(\nsiglist\n)\n\n\n\n\n\n\nReplaces strings \"X\",\"Y\",\"M\" with 23,24,25 {Int} in array generated in load\nsiglist() use in load\nsiglist() because X and Y need to be replaced with Int\n\n\nsource\n\n\n#\n\n\nVariantVisualization.combined_all_genotype_array_functions\n \n \nMethod\n.\n\n\ncombined_all_genotype_array_functions\n(\nsub\n)\n\n\n\n\n\n\nconvert sub from variant filters to gt\nnum\narray and gt\nchromosome\nlabels for plot functions.\n\n\nsource\n\n\n#\n\n\nVariantVisualization.combined_all_read_depth_array_functions\n \n \nMethod\n.\n\n\ncombined_all_read_depth_array_functions\n(\nsub\n)\n\n\n\n\n\n\nconvert sub from variant filters to dp\nnum\narray and dp\nchromosome\nlabels for plot functions.\n\n\nsource\n\n\n#\n\n\nVariantVisualization.combined_all_read_depth_array_functions_for_avg_dp\n \n \nMethod\n.\n\n\ncombined_all_read_depth_array_functions_for_avg_dp\n(\nsub\n)\n\n\n\n\n\n\nconvert sub from variant filters to dp\nnum\narray and dp\nchromosome\nlabels for plot functions.\n\n\nsource\n\n\n#\n\n\nVariantVisualization.define_geno_dict\n \n \nMethod\n.\n\n\ndefine_geno_dict\n()\n\n\n\n\n\n\nreturns dictionary of values for use in replace\ngenotype\nwith_vals()\n\n\nsource\n\n\n#\n\n\nVariantVisualization.dp_heatmap2\n \n \nMethod\n.\n\n\ndp_heatmap2\n(\ninput\n::\nArray\n{\nInt64\n,\n2\n},\ntitle\n::\nString\n,\nchrom_label_info\n::\nTuple\n{\nArray\n{\nString\n,\n1\n},\nArray\n{\nInt64\n,\n1\n},\nString\n},\n \nsample_names\n,\nchr_pos_tuple_list_rev\n,\ny_axis_label_option\n,\nx_axis_label_option\n)\n\n\n\n\n\n\ngenerate heatmap of read depth data.\n\n\nsource\n\n\n#\n\n\nVariantVisualization.find_group_label_indices\n \n \nMethod\n.\n\n\nfind_group_label_indices\n(\npheno\n,\ntrait_to_group_by\n,\nrow_to_sort_by\n)\n\n\n\n\n\n\nfind indices and determines names for group 1 and group 2 labels on plots. finds index of center of each sample group to place tick mark and label.\n\n\nsource\n\n\n#\n\n\nVariantVisualization.generate_chromosome_positions_for_hover_labels\n \n \nMethod\n.\n\n\ngenerate_chromosome_positions_for_hover_labels\n(\nchr_labels\n::\nArray\n{\nAny\n,\n2\n})\n\n\n\n\n\n\ncreates tuple of genomic locations to set as tick labels. This is automatically store chromosome positions in hover labels. However tick labels are set to hidden with showticklabels=false so they will not crowd the y axis.\n\n\nsource\n\n\n#\n\n\nVariantVisualization.generate_genotype_array\n \n \nMethod\n.\n\n\ngenerate_genotype_array\n(\nrecord_sub\n::\nArray\n{\nAny\n,\n1\n},\ngenotype_field\n::\nString\n)\n\n\n\n\n\n\nReturns numerical array of genotype values (either genotype or read\ndepth values) which are translated by another function into num\narray Where genotype\nfield is either GT or DP to visualize genotype or read\ndepth\n\n\nsource\n\n\n#\n\n\nVariantVisualization.generate_hover_text_array\n \n \nMethod\n.\n\n\ngenerate_hover_text_array\n(\nchr_pos_tuple_list\n,\nsample_names\n,\ninput\n,\nmode\n)\n\n\n\n\n\n\nGenerate array of data for hovertext to use as custom hover text for ungrouped heatmaps. Where mode is GT or DP.\n\n\nsource\n\n\n#\n\n\nVariantVisualization.generate_hover_text_array_grouped\n \n \nMethod\n.\n\n\ngenerate_hover_text_array_grouped\n(\nchr_pos_tuple_list\n,\nsample_names\n,\ninput\n,\nmode\n)\n\n\n\n\n\n\nGenerate array of data for hovertext to use as custom hover text for grouped heatmaps. Where mode is GT or DP.\n\n\nsource\n\n\n#\n\n\nVariantVisualization.genomic_range_siglist_filter\n \n \nMethod\n.\n\n\ngenomic_range_siglist_filter\n(\nvcf_filename\n,\nsig_list\n,\nchr_range\n::\nAbstractString\n)\n\n\n\n\n\n\nreturns subarray of vcf records with io\npass\nfilter, io\nsig\nlist\nvcf\nfilter, and io\ngenomic\nrange\nvcf\nfilter applied.\n\n\nsource\n\n\n#\n\n\nVariantVisualization.genotype_heatmap_with_groups\n \n \nMethod\n.\n\n\ngenotype\nheatmap\nwith\ngroups(input::Array{Int64,2},title::String,chrom\nlabel\ninfo::Tuple{Array{String,1},Array{Int64,1},String},group\nlabel\npack::Array{Any,1},id\nlist,chr\npos\ntuple\nlist\nrev,y\naxis\nlabel\noption,trait\nlabel\narray,x\naxis\nlabel\noption,number_rows) generate heatmap of genotype data.\n\n\nsource\n\n\n#\n\n\nVariantVisualization.get_sample_names\n \n \nMethod\n.\n\n\nget_sample_names\n(\nreader\n)\n\n\n\n\n\n\nreturns sample ids of vcf file as a vector of symbols for naming columns of num_array dataframe object for column filter functions\n\n\nsource\n\n\n#\n\n\nVariantVisualization.io_genomic_range_vcf_filter\n \n \nMethod\n.\n\n\nio\ngenomic\nrange\nvcf\nfilter(chr\nrange::String, vcf\nfilename::AbstractString) create subarray of vcf variant records matching user specified chromosome range in format: (e.g. chr1:0-30000000)\n\n\nsource\n\n\n#\n\n\nVariantVisualization.io_pass_filter\n \n \nMethod\n.\n\n\nio_pass_filter\n(\nvcf_filename\n)\n\n\n\n\n\n\nreturns subarray of vcf records including only records with FILTER status = PASS\n\n\nsource\n\n\n#\n\n\nVariantVisualization.io_sig_list_vcf_filter\n \n \nMethod\n.\n\n\nio_sig_list_vcf_filter\n(\nsig_list\n,\nvcf_filename\n)\n\n\n\n\n\n\nreturns subarray of variant records matching a list of variant positions returned from load_siglist()\n\n\nsource\n\n\n#\n\n\nVariantVisualization.jupyter_main\n \n \nMethod\n.\n\n\njupyter\nmain(vcf\nfilename,saving\noptions,variant\nfilters,sample\nselection,plotting\noptions)\n\n\nfilters, plots visualization, and saves as figure. utilizes all global variables set in first cell of jupyter notebook\n\n\nsource\n\n\n#\n\n\nVariantVisualization.list_sample_names_low_dp\n \n \nMethod\n.\n\n\nlist_sample_names_low_dp\n(\nsample_avg_list\n::\nArray\n{\nFloat64\n,\n2\n},\nsample_names\n)\n\n\n\n\n\n\nreturns list of sample ids that have an average read depth of under 15 across all variant positions\n\n\nsource\n\n\n#\n\n\nVariantVisualization.list_variant_positions_low_dp\n \n \nMethod\n.\n\n\nlist_variant_positions_low_dp\n(\nvariant_avg_list\n::\nArray\n{\nFloat64\n,\n2\n},\nchrom_labels\n)\n\n\n\n\n\n\nfinds variant positions that have an average read depth of under 15 across all patients\n\n\nsource\n\n\n#\n\n\nVariantVisualization.load_siglist\n \n \nMethod\n.\n\n\nload_siglist\n(\nfilename\n::\nAbstractString\n)\n\n\n\n\n\n\nwhere x = filename of significant SNP variant location list in comma delimited format (saved as .csv)\n\n\nsource\n\n\n#\n\n\nVariantVisualization.pass_genomic_range_filter\n \n \nMethod\n.\n\n\npass_genomic_range_filter\n(\nreader\n::\nGeneticVariation\n.\nVCF\n.\nReader\n,\nchr_range\n::\nAbstractString\n,\nvcf_filename\n)\n\n\n\n\n\n\nreturns subarray of vcf records with io\npass\nfilter and io\ngenomic\nrange\nvcf\nfilter applied.\n\n\nsource\n\n\n#\n\n\nVariantVisualization.pass_genomic_range_siglist_filter\n \n \nMethod\n.\n\n\npass_genomic_range_siglist_filter\n(\nvcf_filename\n,\nsig_list\n,\nchr_range\n::\nAbstractString\n)\n\n\n\n\n\n\nreturns subarray of vcf records with io\npass\nfilter, io\nsig\nlist\nvcf\nfilter, and io\ngenomic\nrange\nvcf\nfilter applied.\n\n\nsource\n\n\n#\n\n\nVariantVisualization.pass_siglist_filter\n \n \nMethod\n.\n\n\npass_siglist_filter\n(\nvcf_filename\n,\nsig_list\n,\nchr_range\n::\nAbstractString\n)\n\n\n\n\n\n\nreturns subarray of vcf records with io\npass\nfilter, io\nsig\nlist\nvcf\nfilter, and io\ngenomic\nrange\nvcf\nfilter applied.\n\n\nsource\n\n\n#\n\n\nVariantVisualization.process_plot_inputs\n \n \nMethod\n.\n\n\nprocess_plot_inputs\n(\nchrom_label_info\n,\nsample_names\n,\nchr_pos_tuple_list_rev\n)\n\n\n\n\n\n\nPrepares input for heatmap plot function for both genotype and read depth plots without \u2013group_samples flag.\n\n\nsource\n\n\n#\n\n\nVariantVisualization.process_plot_inputs_for_grouped_data\n \n \nMethod\n.\n\n\nprocess_plot_inputs_for_grouped_data\n(\nchrom_label_info\n::\nTuple\n{\nArray\n{\nString\n,\n1\n},\nArray\n{\nInt64\n,\n1\n},\nString\n},\ngroup_label_pack\n::\nArray\n{\nAny\n,\n1\n},\nid_list\n,\nchr_pos_tuple_list_rev\n,\ntrait_label_array\n)\n\n\n\n\n\n\nPrepares input for heatmap plot function for both genotype and read depth plots with \u2013group_samples flag.\n\n\nsource\n\n\n#\n\n\nVariantVisualization.read_depth_threshhold\n \n \nMethod\n.\n\n\nread_depth_threshhold\n(\ndp_array\n::\nArray\n{\nInt64\n,\n2\n})\n\n\n\n\n\n\nCaps read depth outlier values at user defined threshhold. threshhold defaults to dp = 100. All dp over 100 are set to 100 to visualize read depth values between 0 \n dp \n 100 in better definition.\n\n\nsource\n\n\n#\n\n\nVariantVisualization.returnXY_column1!\n \n \nMethod\n.\n\n\nreturnXY_column1!\n(\nchr_label_vector\n)\n\n\n\n\n\n\nReplace String \"23\",\"24\",\"25\" with \"X\",\"Y\",\"M\" in chromosome label vector used for plot labels\n\n\nsource\n\n\n#\n\n\nVariantVisualization.returnXY_column1_siglist!\n \n \nMethod\n.\n\n\nreturnXY_column1_siglist!\n(\nsiglist_sorted\n)\n\n\n\n\n\n\nReplace String \"23\",\"24\",\"25\" with \"X\",\"Y\",\"M\" in siglist for filtering\n\n\nsource\n\n\n#\n\n\nVariantVisualization.save_graphic\n \n \nMethod\n.\n\n\nsave_graphic\n(\ngraphic\n,\noutput_directory\n,\nsave_ext\n,\ntitle\n,\nremote_option\n)\n\n\n\n\n\n\nSave plot in either html or static image formats incuding eps, png, svg, and pdf\n\n\nsource\n\n\n#\n\n\nVariantVisualization.save_numerical_array\n \n \nMethod\n.\n\n\nsave_numerical_array\n(\nnum_array\n::\nMatrix\n{\nAny\n},\nsample_names\n,\nchr_labels\n,\ntitle\n,\noutput_directory\n)\n\n\n\n\n\n\nsave numerical array with chr labels and sample ids to working directory\n\n\nsource\n\n\n#\n\n\nVariantVisualization.select_columns\n \n \nMethod\n.\n\n\nselect_columns\n(\nfilename_sample_list\n::\nAbstractString\n,\n \nnum_array\n::\nArray\n{\nInt64\n,\n2\n},\n \nsample_names\n)\n\n\n\n\n\n\nreturns num\narray with columns matching user generated list of sample ids to select for analysis. num\narray now has sample ids in first row.\n\n\nsource\n\n\n#\n\n\nVariantVisualization.sortcols_by_phenotype_matrix\n \n \nMethod\n.\n\n\nsortcols_by_phenotype_matrix\n(\npheno_matrix_filename\n::\nString\n,\ntrait_to_group_by\n::\nString\n,\nnum_array\n::\nArray\n{\nInt64\n,\n2\n},\n \nsample_names\n::\nArray\n{\nSymbol\n,\n2\n})\n\n\n\n\n\n\ngroup samples by a common trait using a user generated key matrix (\"phenotype matrix\") returns num\narray,group\nlabel_pack,\n\n\nsource\n\n\n#\n\n\nVariantVisualization.test_parse_main\n \n \nMethod\n.\n\n\ntest_parse_main\n(\nARGS\n::\nVector\n{\nString\n})\n\n\n\n\n\n\nDefines argument parsing rules for viva script.\n\n\nsource\n\n\n#\n\n\nVariantVisualization.translate_genotype_to_num_array\n \n \nMethod\n.\n\n\ntranslate_genotype_to_num_array\n(\ngenotype_array\n,\ngeno_dict\n)\n\n\n\n\n\n\nreturns a tuple of num\narray for plotting, and chromosome labels for plotting as label bar. Translates array of genotype values to numerical array of categorical values. Genotype values are converted to categorical values. No\ncall=0, 0/0=1, heterozygous\nvariant=2, homozygous\nvariant=3\n\n\nsource\n\n\n#\n\n\nVariantVisualization.translate_readdepth_strings_to_num_array\n \n \nMethod\n.\n\n\ntranslate_readdepth_strings_to_num_array\n(\nread_depth_array\n::\nArray\n{\nAny\n,\n2\n})\n\n\n\n\n\n\nReturns array of read\ndepth as int for plotting and average calculation. Ceiling of dp=100 is set to prevent high dp value from hiding (or \"blowing out\") low dp values. (see read\ndepth\nthreshhold() ). Where read\ndepth\narray is output of generate\ngenotype\narray() for DP option returns a tuple of num\narray type Int for average calculation and plotting, and chromosome labels for plotting as label bar\n\n\nsource\n\n\n#\n\n\nVariantVisualization.create_chr_dict\n \n \nMethod\n.\n\n\ncreate_chr_dict\n()\n\n\n\n\n\n\ncreates dict for use in combined\nall\ngenotype\narray\nfunctions() for removing 'chr' from chromosome labels to allow sorting variant records by chromosome position.\n\n\nsource\n\n\n#\n\n\nVariantVisualization.dp_heatmap2_with_groups\n \n \nMethod\n.\n\n\ndp_heatmap2_with_groups\n(\ninput\n::\nArray\n{\nInt64\n,\n2\n},\ntitle\n::\nString\n,\nchrom_label_info\n::\nTuple\n{\nArray\n{\nString\n,\n1\n},\nArray\n{\nInt64\n,\n1\n},\nString\n},\ngroup_label_pack\n::\nArray\n{\nAny\n,\n1\n},\nid_list\n,\nchr_pos_tuple_list_rev\n,\ny_axis_label_option\n,\ntrait_label_array\n,\nx_axis_label_option\n,\nnumber_rows\n)\n\n\n\n\n\n\ngenerate heatmap of read depth data with grouped samples.\n\n\nsource\n\n\n#\n\n\nVariantVisualization.generate_legend_increments_grouped\n \n \nMethod\n.\n\n\n \ngenerate_legend_increments_grouped\n(\ninput\n)\n\n\n\n\n\n\nDynamically generates positons for shapes that build categorical colorscale including two color boxes for traits 1 and 2\n\n\nsource\n\n\n#\n\n\nVariantVisualization.generate_legend_increments_ungrouped\n \n \nMethod\n.\n\n\n \ngenerate_legend_increments_ungrouped\n(\ninput\n)\n\n\n\n\n\n\nDynamically generates positons for shapes that build categorical colorscale.\n\n\nsource\n\n\n#\n\n\nVariantVisualization.genotype_heatmap2_new_legend\n \n \nMethod\n.\n\n\ngenotype_heatmap2_new_legend\n(\ninput\n::\nArray\n{\nAny\n,\n2\n},\ntitle\n::\nAbstractString\n,\nfilename\n,\nsample_names\n,\ngt_chromosome_labels\n,\ny_axis_label_option\n,\nx_axis_label_option\n)\n\n\n\n\n\n\ngenerate heatmap of genotype data.\n\n\nsource\n\n\n#\n\n\nVariantVisualization.index_vcf\n \n \nMethod\n.\n\n\nindex_vcf\n(\nvcf_filename\n)\n\n\n\n\n\n\nCreates and saves index file with three column array of vcf chrom, position, and row number to be used by significant list filter functions.\n\n\nsource\n\n\n#\n\n\nVariantVisualization.make_chromosome_labels\n \n \nMethod\n.\n\n\nmake_chromosome_labels\n(\nchrom_label_info\n)\n\n\n\n\n\n\nReturns vector of values to use as tick vals to show first chromosome label per chromosome with blank spaces between each first chromosome position for use with \u2013y\naxis\nlabels=chromosomes. duplicate\nlast\nlabel tells if last chrom label is single or mutiple which affects number\nto\nfill value.\n\n\nsource\n\n\n#\n\n\nVariantVisualization.match_siglist_to_index\n \n \nMethod\n.\n\n\nmatch_siglist_to_index\n(\nsig_list\n,\nvcf_index\n)\n\n\n\n\n\n\nReturns vcf row indices of each variant position in sig_list for reader function to allow fast filtering in significant list filter funcitons.\n\n\nsource\n\n\n#\n\n\nVariantVisualization.sort_genotype_array\n \n \nMethod\n.\n\n\nsort_genotype_array\n(\ngenotype_array\n)\n\n\n\n\n\n\nsorts genotype array for GT or DP by chromosomal location\n\n\nsource\n\n\n#\n\n\nVariantVisualization.translate_readdepth_strings_to_num_array_for_avg_dp\n \n \nMethod\n.\n\n\ntranslate_readdepth_strings_to_num_array_for_avg_dp\n(\nread_depth_array\n::\nArray\n{\nAny\n,\n2\n})\n\n\n\n\n\n\nReturns array of read\ndepth as int for plotting and average calculation. 'read\ndepth\narray' is output of generate\ngenotype\narray() for DP option returns a tuple of num\narray type Int for average calculation and plotting, and chromosome labels for plotting as label bar No call is replaced with 0 for avg_calculation. Ceiling of dp=100 is set to prevent high dp value from hiding (or \"blowing out\") low dp values.\n\n\nsource", 
            "title": "API"
        }, 
        {
            "location": "/api/#import", 
            "text": "using   VariantVisualization", 
            "title": "Import"
        }, 
        {
            "location": "/api/#index", 
            "text": "VariantVisualization.add_pheno_matrix_to_dp_data_for_plotting  VariantVisualization.add_pheno_matrix_to_gt_data_for_plotting  VariantVisualization.avg_dp_samples  VariantVisualization.avg_dp_variant  VariantVisualization.avg_sample_dp_scatter  VariantVisualization.avg_variant_dp_line_chart  VariantVisualization.build_set_from_list  VariantVisualization.checkfor_outputdirectory  VariantVisualization.chromosome_label_generator  VariantVisualization.clean_column1!  VariantVisualization.clean_column1_siglist!  VariantVisualization.combined_all_genotype_array_functions  VariantVisualization.combined_all_read_depth_array_functions  VariantVisualization.combined_all_read_depth_array_functions_for_avg_dp  VariantVisualization.create_chr_dict  VariantVisualization.define_geno_dict  VariantVisualization.dp_heatmap2  VariantVisualization.dp_heatmap2_with_groups  VariantVisualization.find_group_label_indices  VariantVisualization.generate_chromosome_positions_for_hover_labels  VariantVisualization.generate_genotype_array  VariantVisualization.generate_hover_text_array  VariantVisualization.generate_hover_text_array_grouped  VariantVisualization.generate_legend_increments_grouped  VariantVisualization.generate_legend_increments_ungrouped  VariantVisualization.genomic_range_siglist_filter  VariantVisualization.genotype_heatmap2_new_legend  VariantVisualization.genotype_heatmap_with_groups  VariantVisualization.get_sample_names  VariantVisualization.index_vcf  VariantVisualization.io_genomic_range_vcf_filter  VariantVisualization.io_pass_filter  VariantVisualization.io_sig_list_vcf_filter  VariantVisualization.jupyter_main  VariantVisualization.list_sample_names_low_dp  VariantVisualization.list_variant_positions_low_dp  VariantVisualization.load_siglist  VariantVisualization.make_chromosome_labels  VariantVisualization.match_siglist_to_index  VariantVisualization.pass_genomic_range_filter  VariantVisualization.pass_genomic_range_siglist_filter  VariantVisualization.pass_siglist_filter  VariantVisualization.process_plot_inputs  VariantVisualization.process_plot_inputs_for_grouped_data  VariantVisualization.read_depth_threshhold  VariantVisualization.returnXY_column1!  VariantVisualization.returnXY_column1_siglist!  VariantVisualization.save_graphic  VariantVisualization.save_numerical_array  VariantVisualization.select_columns  VariantVisualization.sort_genotype_array  VariantVisualization.sortcols_by_phenotype_matrix  VariantVisualization.test_parse_main  VariantVisualization.translate_genotype_to_num_array  VariantVisualization.translate_readdepth_strings_to_num_array  VariantVisualization.translate_readdepth_strings_to_num_array_for_avg_dp", 
            "title": "Index"
        }, 
        {
            "location": "/api/#functions", 
            "text": "#  VariantVisualization.add_pheno_matrix_to_dp_data_for_plotting     Method .  add_pheno_matrix_to_dp_data_for_plotting ( pheno_matrix , dp_num_array , trait_labels , chrom_label_info , number_rows )   add the pheno matrix used to group samples to the data array for input into plotting functions. Resizes the pheno matrix to maintain correct dimensions for heatmap viz by finding value=0.05 number rows*data to multiply each pheno row by before vcat.  source  #  VariantVisualization.add_pheno_matrix_to_gt_data_for_plotting     Method .  add_pheno_matrix_to_gt_data_for_plotting ( pheno_matrix , gt_num_array , trait_labels , chrom_label_info , number_rows )   add the pheno matrix used to group samples to the data array for input into plotting functions. Resizes the pheno matrix to maintain correct dimensions for heatmap viz by finding value=0.05 number rows*data to multiply each pheno row by before vcat.  source  #  VariantVisualization.avg_dp_samples     Method .  avg_dp_samples ( dp_num_array :: Array { Int64 , 2 })   create sample avg list vector that lists averages of read depth for each sample for input into avg sample dp line chart(sample avg list) dp num array must contain dp values as Int64 and be without chromosome position columns  source  #  VariantVisualization.avg_dp_variant     Method .  avg_dp_variant ( dp_num_array :: Array { Int64 , 2 })   create variant avg list vector that lists averages of read depth for each variant for input into avg variant dp line chart(variant avg list)  source  #  VariantVisualization.avg_sample_dp_scatter     Method .  avg_sample_dp_scatter ( sample_avg_list :: Array { Float64 , 1 }, sample_names , x_axis_label_option )   generate line chart of average read depths of each sample.  source  #  VariantVisualization.avg_variant_dp_line_chart     Method .  avg_variant_dp_line_chart ( variant_avg_list :: Array { Float64 , 1 }, chr_pos_tuple_list , y_axis_label_option , chrom_label_info )   generate line chart of average read depths of each variant.  source  #  VariantVisualization.build_set_from_list     Method .  build_set_from_list ( sig_list :: Array { String , 2 })   build set of tuples of chrom and pos of each record in vcf for use in sig list filters. Method 3: build list from input variant locations in String chromosomes only (chrX,Y,M)  source  #  VariantVisualization.checkfor_outputdirectory     Method .  checkfor_outputdirectory ( path :: String )   Checks to see if output directory exists already. If it doesn't, it creates the new directory to write output files to.  source  #  VariantVisualization.chromosome_label_generator     Method .  chromosome_label_generator ( chromosome_labels :: Array { Any , 1 })   Returns vector of chr labels and indices to mark chromosomes in plotly heatmap Specifically, saves indexes and chrom labels in vectors to pass into heatmap function to ticvals and tictext respectively. Input is either gt chromosome labels or dp chromosome labels from translate gt/dp to num array()  source  #  VariantVisualization.clean_column1!     Method .  clean_column1! ( matrix_with_chr_column )   Replace String \"X\",\"Y\",\"M\" from chromosome column with 23,24,25 respectively so variants can be sorted by descending chr position for plotting  source  #  VariantVisualization.clean_column1_siglist!     Method .  clean_column1_siglist! ( siglist )   Replaces strings \"X\",\"Y\",\"M\" with 23,24,25 {Int} in array generated in load siglist() use in load siglist() because X and Y need to be replaced with Int  source  #  VariantVisualization.combined_all_genotype_array_functions     Method .  combined_all_genotype_array_functions ( sub )   convert sub from variant filters to gt num array and gt chromosome labels for plot functions.  source  #  VariantVisualization.combined_all_read_depth_array_functions     Method .  combined_all_read_depth_array_functions ( sub )   convert sub from variant filters to dp num array and dp chromosome labels for plot functions.  source  #  VariantVisualization.combined_all_read_depth_array_functions_for_avg_dp     Method .  combined_all_read_depth_array_functions_for_avg_dp ( sub )   convert sub from variant filters to dp num array and dp chromosome labels for plot functions.  source  #  VariantVisualization.define_geno_dict     Method .  define_geno_dict ()   returns dictionary of values for use in replace genotype with_vals()  source  #  VariantVisualization.dp_heatmap2     Method .  dp_heatmap2 ( input :: Array { Int64 , 2 }, title :: String , chrom_label_info :: Tuple { Array { String , 1 }, Array { Int64 , 1 }, String },   sample_names , chr_pos_tuple_list_rev , y_axis_label_option , x_axis_label_option )   generate heatmap of read depth data.  source  #  VariantVisualization.find_group_label_indices     Method .  find_group_label_indices ( pheno , trait_to_group_by , row_to_sort_by )   find indices and determines names for group 1 and group 2 labels on plots. finds index of center of each sample group to place tick mark and label.  source  #  VariantVisualization.generate_chromosome_positions_for_hover_labels     Method .  generate_chromosome_positions_for_hover_labels ( chr_labels :: Array { Any , 2 })   creates tuple of genomic locations to set as tick labels. This is automatically store chromosome positions in hover labels. However tick labels are set to hidden with showticklabels=false so they will not crowd the y axis.  source  #  VariantVisualization.generate_genotype_array     Method .  generate_genotype_array ( record_sub :: Array { Any , 1 }, genotype_field :: String )   Returns numerical array of genotype values (either genotype or read depth values) which are translated by another function into num array Where genotype field is either GT or DP to visualize genotype or read depth  source  #  VariantVisualization.generate_hover_text_array     Method .  generate_hover_text_array ( chr_pos_tuple_list , sample_names , input , mode )   Generate array of data for hovertext to use as custom hover text for ungrouped heatmaps. Where mode is GT or DP.  source  #  VariantVisualization.generate_hover_text_array_grouped     Method .  generate_hover_text_array_grouped ( chr_pos_tuple_list , sample_names , input , mode )   Generate array of data for hovertext to use as custom hover text for grouped heatmaps. Where mode is GT or DP.  source  #  VariantVisualization.genomic_range_siglist_filter     Method .  genomic_range_siglist_filter ( vcf_filename , sig_list , chr_range :: AbstractString )   returns subarray of vcf records with io pass filter, io sig list vcf filter, and io genomic range vcf filter applied.  source  #  VariantVisualization.genotype_heatmap_with_groups     Method .  genotype heatmap with groups(input::Array{Int64,2},title::String,chrom label info::Tuple{Array{String,1},Array{Int64,1},String},group label pack::Array{Any,1},id list,chr pos tuple list rev,y axis label option,trait label array,x axis label option,number_rows) generate heatmap of genotype data.  source  #  VariantVisualization.get_sample_names     Method .  get_sample_names ( reader )   returns sample ids of vcf file as a vector of symbols for naming columns of num_array dataframe object for column filter functions  source  #  VariantVisualization.io_genomic_range_vcf_filter     Method .  io genomic range vcf filter(chr range::String, vcf filename::AbstractString) create subarray of vcf variant records matching user specified chromosome range in format: (e.g. chr1:0-30000000)  source  #  VariantVisualization.io_pass_filter     Method .  io_pass_filter ( vcf_filename )   returns subarray of vcf records including only records with FILTER status = PASS  source  #  VariantVisualization.io_sig_list_vcf_filter     Method .  io_sig_list_vcf_filter ( sig_list , vcf_filename )   returns subarray of variant records matching a list of variant positions returned from load_siglist()  source  #  VariantVisualization.jupyter_main     Method .  jupyter main(vcf filename,saving options,variant filters,sample selection,plotting options)  filters, plots visualization, and saves as figure. utilizes all global variables set in first cell of jupyter notebook  source  #  VariantVisualization.list_sample_names_low_dp     Method .  list_sample_names_low_dp ( sample_avg_list :: Array { Float64 , 2 }, sample_names )   returns list of sample ids that have an average read depth of under 15 across all variant positions  source  #  VariantVisualization.list_variant_positions_low_dp     Method .  list_variant_positions_low_dp ( variant_avg_list :: Array { Float64 , 2 }, chrom_labels )   finds variant positions that have an average read depth of under 15 across all patients  source  #  VariantVisualization.load_siglist     Method .  load_siglist ( filename :: AbstractString )   where x = filename of significant SNP variant location list in comma delimited format (saved as .csv)  source  #  VariantVisualization.pass_genomic_range_filter     Method .  pass_genomic_range_filter ( reader :: GeneticVariation . VCF . Reader , chr_range :: AbstractString , vcf_filename )   returns subarray of vcf records with io pass filter and io genomic range vcf filter applied.  source  #  VariantVisualization.pass_genomic_range_siglist_filter     Method .  pass_genomic_range_siglist_filter ( vcf_filename , sig_list , chr_range :: AbstractString )   returns subarray of vcf records with io pass filter, io sig list vcf filter, and io genomic range vcf filter applied.  source  #  VariantVisualization.pass_siglist_filter     Method .  pass_siglist_filter ( vcf_filename , sig_list , chr_range :: AbstractString )   returns subarray of vcf records with io pass filter, io sig list vcf filter, and io genomic range vcf filter applied.  source  #  VariantVisualization.process_plot_inputs     Method .  process_plot_inputs ( chrom_label_info , sample_names , chr_pos_tuple_list_rev )   Prepares input for heatmap plot function for both genotype and read depth plots without \u2013group_samples flag.  source  #  VariantVisualization.process_plot_inputs_for_grouped_data     Method .  process_plot_inputs_for_grouped_data ( chrom_label_info :: Tuple { Array { String , 1 }, Array { Int64 , 1 }, String }, group_label_pack :: Array { Any , 1 }, id_list , chr_pos_tuple_list_rev , trait_label_array )   Prepares input for heatmap plot function for both genotype and read depth plots with \u2013group_samples flag.  source  #  VariantVisualization.read_depth_threshhold     Method .  read_depth_threshhold ( dp_array :: Array { Int64 , 2 })   Caps read depth outlier values at user defined threshhold. threshhold defaults to dp = 100. All dp over 100 are set to 100 to visualize read depth values between 0   dp   100 in better definition.  source  #  VariantVisualization.returnXY_column1!     Method .  returnXY_column1! ( chr_label_vector )   Replace String \"23\",\"24\",\"25\" with \"X\",\"Y\",\"M\" in chromosome label vector used for plot labels  source  #  VariantVisualization.returnXY_column1_siglist!     Method .  returnXY_column1_siglist! ( siglist_sorted )   Replace String \"23\",\"24\",\"25\" with \"X\",\"Y\",\"M\" in siglist for filtering  source  #  VariantVisualization.save_graphic     Method .  save_graphic ( graphic , output_directory , save_ext , title , remote_option )   Save plot in either html or static image formats incuding eps, png, svg, and pdf  source  #  VariantVisualization.save_numerical_array     Method .  save_numerical_array ( num_array :: Matrix { Any }, sample_names , chr_labels , title , output_directory )   save numerical array with chr labels and sample ids to working directory  source  #  VariantVisualization.select_columns     Method .  select_columns ( filename_sample_list :: AbstractString ,   num_array :: Array { Int64 , 2 },   sample_names )   returns num array with columns matching user generated list of sample ids to select for analysis. num array now has sample ids in first row.  source  #  VariantVisualization.sortcols_by_phenotype_matrix     Method .  sortcols_by_phenotype_matrix ( pheno_matrix_filename :: String , trait_to_group_by :: String , num_array :: Array { Int64 , 2 },   sample_names :: Array { Symbol , 2 })   group samples by a common trait using a user generated key matrix (\"phenotype matrix\") returns num array,group label_pack,  source  #  VariantVisualization.test_parse_main     Method .  test_parse_main ( ARGS :: Vector { String })   Defines argument parsing rules for viva script.  source  #  VariantVisualization.translate_genotype_to_num_array     Method .  translate_genotype_to_num_array ( genotype_array , geno_dict )   returns a tuple of num array for plotting, and chromosome labels for plotting as label bar. Translates array of genotype values to numerical array of categorical values. Genotype values are converted to categorical values. No call=0, 0/0=1, heterozygous variant=2, homozygous variant=3  source  #  VariantVisualization.translate_readdepth_strings_to_num_array     Method .  translate_readdepth_strings_to_num_array ( read_depth_array :: Array { Any , 2 })   Returns array of read depth as int for plotting and average calculation. Ceiling of dp=100 is set to prevent high dp value from hiding (or \"blowing out\") low dp values. (see read depth threshhold() ). Where read depth array is output of generate genotype array() for DP option returns a tuple of num array type Int for average calculation and plotting, and chromosome labels for plotting as label bar  source  #  VariantVisualization.create_chr_dict     Method .  create_chr_dict ()   creates dict for use in combined all genotype array functions() for removing 'chr' from chromosome labels to allow sorting variant records by chromosome position.  source  #  VariantVisualization.dp_heatmap2_with_groups     Method .  dp_heatmap2_with_groups ( input :: Array { Int64 , 2 }, title :: String , chrom_label_info :: Tuple { Array { String , 1 }, Array { Int64 , 1 }, String }, group_label_pack :: Array { Any , 1 }, id_list , chr_pos_tuple_list_rev , y_axis_label_option , trait_label_array , x_axis_label_option , number_rows )   generate heatmap of read depth data with grouped samples.  source  #  VariantVisualization.generate_legend_increments_grouped     Method .    generate_legend_increments_grouped ( input )   Dynamically generates positons for shapes that build categorical colorscale including two color boxes for traits 1 and 2  source  #  VariantVisualization.generate_legend_increments_ungrouped     Method .    generate_legend_increments_ungrouped ( input )   Dynamically generates positons for shapes that build categorical colorscale.  source  #  VariantVisualization.genotype_heatmap2_new_legend     Method .  genotype_heatmap2_new_legend ( input :: Array { Any , 2 }, title :: AbstractString , filename , sample_names , gt_chromosome_labels , y_axis_label_option , x_axis_label_option )   generate heatmap of genotype data.  source  #  VariantVisualization.index_vcf     Method .  index_vcf ( vcf_filename )   Creates and saves index file with three column array of vcf chrom, position, and row number to be used by significant list filter functions.  source  #  VariantVisualization.make_chromosome_labels     Method .  make_chromosome_labels ( chrom_label_info )   Returns vector of values to use as tick vals to show first chromosome label per chromosome with blank spaces between each first chromosome position for use with \u2013y axis labels=chromosomes. duplicate last label tells if last chrom label is single or mutiple which affects number to fill value.  source  #  VariantVisualization.match_siglist_to_index     Method .  match_siglist_to_index ( sig_list , vcf_index )   Returns vcf row indices of each variant position in sig_list for reader function to allow fast filtering in significant list filter funcitons.  source  #  VariantVisualization.sort_genotype_array     Method .  sort_genotype_array ( genotype_array )   sorts genotype array for GT or DP by chromosomal location  source  #  VariantVisualization.translate_readdepth_strings_to_num_array_for_avg_dp     Method .  translate_readdepth_strings_to_num_array_for_avg_dp ( read_depth_array :: Array { Any , 2 })   Returns array of read depth as int for plotting and average calculation. 'read depth array' is output of generate genotype array() for DP option returns a tuple of num array type Int for average calculation and plotting, and chromosome labels for plotting as label bar No call is replaced with 0 for avg_calculation. Ceiling of dp=100 is set to prevent high dp value from hiding (or \"blowing out\") low dp values.  source", 
            "title": "Functions"
        }
    ]
}