{
    "docs": [
        {
            "location": "/", 
            "text": "Description\n\n\nViVa.jl is a user-friendly command line tool for creating publication quality graphics from Variant Call Format (VCF) files. ViVa.jl provides tools to quickly select variant records and samples to include in visualization.\n\nViVa.jl utilizes ArgParse.jl to parse command line arguments and GeneticVariation.jl to create a memory-efficient VCF Reader object which ViVa.jl utilizes to quickly extract variants of interest.\n\nThis documentation details each [REQUIRED] and optional argument, as well as necessary specific structure for user-generated input files for manipulating records and samples. Clearly named examples of all user-generated input files can be found in the /tests/ directory of the ViVa.jl repository.\n\nViVa.jl can be run through the command line with the following structure:\n\njulia viva_cli.jl [--help] [COMMAND] [OPTIONS]\n\nExample:\njulia viva_cli.jl -v example.vcf -r chr1:20000-30000000 -s html --heatmap read_depth --line_chart samples\n\n\n\n\n\nInstallation\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne6804e0d0fe65a23bcac9cfccb1395101d283ed2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstall ViVa.jl\n\n\nTo stay up to date with new features before release, please check out the master branch.\n\n\nusing\n \nPkg\n\n\nPkg\n.\nclone\n(\nhttps://github.com/compbiocore/ViVa.jl\n)", 
            "title": "Home"
        }, 
        {
            "location": "/#description", 
            "text": "ViVa.jl is a user-friendly command line tool for creating publication quality graphics from Variant Call Format (VCF) files. ViVa.jl provides tools to quickly select variant records and samples to include in visualization.\n\nViVa.jl utilizes ArgParse.jl to parse command line arguments and GeneticVariation.jl to create a memory-efficient VCF Reader object which ViVa.jl utilizes to quickly extract variants of interest.\n\nThis documentation details each [REQUIRED] and optional argument, as well as necessary specific structure for user-generated input files for manipulating records and samples. Clearly named examples of all user-generated input files can be found in the /tests/ directory of the ViVa.jl repository.\n\nViVa.jl can be run through the command line with the following structure:\n\njulia viva_cli.jl [--help] [COMMAND] [OPTIONS]\n\nExample:\njulia viva_cli.jl -v example.vcf -r chr1:20000-30000000 -s html --heatmap read_depth --line_chart samples", 
            "title": "Description"
        }, 
        {
            "location": "/#installation", 
            "text": "e6804e0d0fe65a23bcac9cfccb1395101d283ed2         Install ViVa.jl  To stay up to date with new features before release, please check out the master branch.  using   Pkg  Pkg . clone ( https://github.com/compbiocore/ViVa.jl )", 
            "title": "Installation"
        }, 
        {
            "location": "/filtering_vcf/", 
            "text": "VCF Record and Sample Manipulation\n\n\nViVa.jl provides tools for filtering records as well as selecting and grouping samples by common traits for visualization. Users can access these tools by using ViVa.jl on the command line using the following arguments or single character flags when available for convenience.\n\n\n\n\n\n\n\nReading a VCF\n\n\nSpecify filename of VCF file. [REQUIRED]\n\n--vcf_file\n, \n-f\n\n... -f example.vcf ..\n\nPrint number of records and samples in VCF file.\n\n--show_stats\n\n... --show_stats ...\n\n\n\n\n\n\n\nFiltering Records\n\n\nSelect rows within a given chromosome range. Provide chromosome range after this flag.\n\n--chromosome_range\n, \n-r\n\n... -r chr1:20000-30000000 ...\n\nSelect rows within a given chromosome range. Provide chromosome range after this flag in format chr4:20000000-30000000\n\n--pass_filter\n, \n-p\n\n... --pass_filter ...\n\nSelect variants matching list of chromosomal positions. Provide filename of text file formatted with two columns in .csv format.\n\n--positions_list\n, \n-l\n\n... -l \nexample_positions_list.txt\n\n\n\n\n\n\n\n\nSelecting and Grouping Samples\n\n\nSelect samples to include in visualization by providing tab delimited list of sample names (eg. samplenames.txt)\n\n--select_samples\n, \n-x\n\n... -x example_list_of_sample_ids.txt\n\nGroup samples by common trait using user generated matrix key of traits and sample names following format guidelines in documentation. Provide file name of .csv file followed by trait to group by as it appears in the matrix key of traits and sample names.\n\n--group_samples\n, \n-g\n\n... -g example_sample_traits_key.csv controls,cases ...", 
            "title": "Read and Filter VCF"
        }, 
        {
            "location": "/filtering_vcf/#vcf-record-and-sample-manipulation", 
            "text": "ViVa.jl provides tools for filtering records as well as selecting and grouping samples by common traits for visualization. Users can access these tools by using ViVa.jl on the command line using the following arguments or single character flags when available for convenience.", 
            "title": "VCF Record and Sample Manipulation"
        }, 
        {
            "location": "/filtering_vcf/#reading-a-vcf", 
            "text": "Specify filename of VCF file. [REQUIRED] --vcf_file ,  -f \n... -f example.vcf ..\n\nPrint number of records and samples in VCF file. --show_stats \n... --show_stats ...", 
            "title": "Reading a VCF"
        }, 
        {
            "location": "/filtering_vcf/#filtering-records", 
            "text": "Select rows within a given chromosome range. Provide chromosome range after this flag. --chromosome_range ,  -r \n... -r chr1:20000-30000000 ...\n\nSelect rows within a given chromosome range. Provide chromosome range after this flag in format chr4:20000000-30000000 --pass_filter ,  -p \n... --pass_filter ...\n\nSelect variants matching list of chromosomal positions. Provide filename of text file formatted with two columns in .csv format. --positions_list ,  -l \n... -l  example_positions_list.txt", 
            "title": "Filtering Records"
        }, 
        {
            "location": "/filtering_vcf/#selecting-and-grouping-samples", 
            "text": "Select samples to include in visualization by providing tab delimited list of sample names (eg. samplenames.txt) --select_samples ,  -x \n... -x example_list_of_sample_ids.txt\n\nGroup samples by common trait using user generated matrix key of traits and sample names following format guidelines in documentation. Provide file name of .csv file followed by trait to group by as it appears in the matrix key of traits and sample names. --group_samples ,  -g \n... -g example_sample_traits_key.csv controls,cases ...", 
            "title": "Selecting and Grouping Samples"
        }, 
        {
            "location": "/plotting/", 
            "text": "Plotting genotype field data as a categorical heatmap.\n\n\nGenerate heatmap of distribution of values in genotype field across samples. Defaults to genotype.\n\n--heatmap\n, \n-m\n\n... -m [option] ...\nPossible options:\ngenotype\nread_depth\n\nGenerate scatter plots of average read depths across either samples or variants.\n... --line_chart [option] ...\nPossible options:\nsample\nvariant\n\nSpecify file format you wish to save all graphics as (eg. pdf, html, png). [REQUIRED]\n\n--save_format\n, \n-s\n    \n... -s [option] ...\nPossible options:\nhtml\npdf\nsvg\npng   \n\nSpecify output directory for saving all graphics. If directory doesn\nt exist, it creates the directory within the working directory. Defaults to \noutput.\n\n\n--output_directory\n, \n-o\n\n... --line_chart [option] ...\n\nSpecify filename for saving heatmap. #test this, positional argument?\n\nheatmap_title", 
            "title": "Heatmaps"
        }, 
        {
            "location": "/plotting/#plotting-genotype-field-data-as-a-categorical-heatmap", 
            "text": "Generate heatmap of distribution of values in genotype field across samples. Defaults to genotype. --heatmap ,  -m \n... -m [option] ...\nPossible options:\ngenotype\nread_depth\n\nGenerate scatter plots of average read depths across either samples or variants.\n... --line_chart [option] ...\nPossible options:\nsample\nvariant\n\nSpecify file format you wish to save all graphics as (eg. pdf, html, png). [REQUIRED] --save_format ,  -s     \n... -s [option] ...\nPossible options:\nhtml\npdf\nsvg\npng   \n\nSpecify output directory for saving all graphics. If directory doesn t exist, it creates the directory within the working directory. Defaults to  output.  --output_directory ,  -o \n... --line_chart [option] ...\n\nSpecify filename for saving heatmap. #test this, positional argument? heatmap_title", 
            "title": "Plotting genotype field data as a categorical heatmap."
        }, 
        {
            "location": "/api/", 
            "text": "Import\n\n\nusing VIVA\n\n\n\n\n\n\n\nIndex\n\n\n\n\nVIVA.add_pheno_matrix_to_dp_data_for_plotting\n\n\nVIVA.add_pheno_matrix_to_gt_data_for_plotting\n\n\nVIVA.avg_dp_samples\n\n\nVIVA.avg_dp_variant\n\n\nVIVA.avg_sample_dp_scatter\n\n\nVIVA.avg_variant_dp_line_chart\n\n\nVIVA.build_set_from_list\n\n\nVIVA.checkfor_outputdirectory\n\n\nVIVA.chromosome_label_generator\n\n\nVIVA.chrrange_siglist_filter\n\n\nVIVA.clean_column1!\n\n\nVIVA.clean_column1_siglist!\n\n\nVIVA.combined_all_genotype_array_functions\n\n\nVIVA.combined_all_read_depth_array_functions\n\n\nVIVA.combined_all_read_depth_array_functions_for_avg_dp\n\n\nVIVA.create_chr_dict\n\n\nVIVA.define_geno_dict\n\n\nVIVA.dp_heatmap2\n\n\nVIVA.dp_heatmap2_with_groups\n\n\nVIVA.find_group_label_indices\n\n\nVIVA.generate_chromosome_positions_for_hover_labels\n\n\nVIVA.generate_genotype_array\n\n\nVIVA.generate_hover_text_array\n\n\nVIVA.generate_hover_text_array_grouped\n\n\nVIVA.genotype_heatmap2\n\n\nVIVA.genotype_heatmap_with_groups\n\n\nVIVA.get_sample_names\n\n\nVIVA.index_vcf\n\n\nVIVA.io_chromosome_range_vcf_filter\n\n\nVIVA.io_pass_filter\n\n\nVIVA.io_sig_list_vcf_filter\n\n\nVIVA.jupyter_main_new\n\n\nVIVA.list_sample_names_low_dp\n\n\nVIVA.list_variant_positions_low_dp\n\n\nVIVA.load_siglist\n\n\nVIVA.make_chromosome_labels\n\n\nVIVA.match_siglist_to_index\n\n\nVIVA.pass_chrrange_filter\n\n\nVIVA.pass_chrrange_siglist_filter\n\n\nVIVA.pass_siglist_filter\n\n\nVIVA.process_plot_inputs\n\n\nVIVA.process_plot_inputs_for_grouped_data\n\n\nVIVA.read_depth_threshhold\n\n\nVIVA.returnXY_column1!\n\n\nVIVA.returnXY_column1_siglist!\n\n\nVIVA.save_graphic\n\n\nVIVA.save_numerical_array\n\n\nVIVA.select_columns\n\n\nVIVA.sort_genotype_array\n\n\nVIVA.sortcols_by_phenotype_matrix\n\n\nVIVA.translate_genotype_to_num_array\n\n\nVIVA.translate_readdepth_strings_to_num_array\n\n\nVIVA.translate_readdepth_strings_to_num_array_for_avg_dp\n\n\n\n\n\n\nFunctions\n\n\n#\n\n\nVIVA.add_pheno_matrix_to_dp_data_for_plotting\n \n \nMethod\n.\n\n\nadd_pheno_matrix_to_dp_data_for_plotting(pheno_matrix,dp_num_array,trait_labels,chrom_label_info,number_rows)\n\n\n\n\n\nadd the pheno matrix used to group samples to the data array for input into plotting functions. Resizes the pheno matrix to maintain correct dimensions for heatmap viz by finding value=0.05\nnumber\nrows*data to multiply each pheno row by before vcat.\n\n\nsource\n\n\n#\n\n\nVIVA.add_pheno_matrix_to_gt_data_for_plotting\n \n \nMethod\n.\n\n\nadd_pheno_matrix_to_gt_data_for_plotting(pheno_matrix,gt_num_array,trait_labels,chrom_label_info,number_rows)\n\n\n\n\n\nadd the pheno matrix used to group samples to the data array for input into plotting functions. Resizes the pheno matrix to maintain correct dimensions for heatmap viz by finding value=0.05\nnumber\nrows*data to multiply each pheno row by before vcat.\n\n\nsource\n\n\n#\n\n\nVIVA.avg_dp_samples\n \n \nMethod\n.\n\n\navg_dp_samples(dp_num_array::Array{Int64,2})\n\n\n\n\n\ncreate sample\navg\nlist vector that lists averages of read depth for each sample for input into avg\nsample\ndp\nline\nchart(sample\navg\nlist) dp\nnum\narray must contain dp values as Int64 and be without chromosome position columns\n\n\nsource\n\n\n#\n\n\nVIVA.avg_dp_variant\n \n \nMethod\n.\n\n\navg_dp_variant(dp_num_array::Array{Int64,2})\n\n\n\n\n\ncreate variant\navg\nlist vector that lists averages of read depth for each variant for input into avg\nvariant\ndp\nline\nchart(variant\navg\nlist)\n\n\nsource\n\n\n#\n\n\nVIVA.avg_sample_dp_scatter\n \n \nMethod\n.\n\n\navg_sample_dp_scatter(sample_avg_list::Array{Float64,1},sample_names,x_axis_label_option)\n\n\n\n\n\ngenerate line chart of average read depths of each sample.\n\n\nsource\n\n\n#\n\n\nVIVA.avg_variant_dp_line_chart\n \n \nMethod\n.\n\n\navg_variant_dp_line_chart(variant_avg_list::Array{Float64,1},chr_pos_tuple_list,y_axis_label_option,chrom_label_info)\n\n\n\n\n\ngenerate line chart of average read depths of each variant.\n\n\nsource\n\n\n#\n\n\nVIVA.checkfor_outputdirectory\n \n \nMethod\n.\n\n\ncheckfor_outputdirectory(path::String)\n\n\n\n\n\nChecks to see if output directory exists already. If it doesn't, it creates the new directory to write output files to.\n\n\nsource\n\n\n#\n\n\nVIVA.chromosome_label_generator\n \n \nMethod\n.\n\n\nchromosome_label_generator(chromosome_labels::Array{Any,1})\n\n\n\n\n\nReturns vector of chr labels and indices to mark chromosomes in plotly heatmap Specifically, saves indexes and chrom labels in vectors to pass into heatmap function to ticvals and tictext respectively. Input is either gt\nchromosome\nlabels or dp\nchromosome\nlabels from translate\ngt/dp\nto\nnum\narray()\n\n\nsource\n\n\n#\n\n\nVIVA.chrrange_siglist_filter\n \n \nMethod\n.\n\n\nchrrange_siglist_filter(vcf_filename,sig_list,chr_range::AbstractString)\n\n\n\n\n\nreturns subarray of vcf records with io\npass\nfilter, io\nsig\nlist\nvcf\nfilter, and io\nchromosome\nrange\nvcf\nfilter applied.\n\n\nsource\n\n\n#\n\n\nVIVA.clean_column1!\n \n \nMethod\n.\n\n\nclean_column1!(matrix_with_chr_column)\n\n\n\n\n\nReplace String \"X\",\"Y\",\"M\" from chromosome column with 23,24,25 respectively so variants can be sorted by descending chr position for plotting\n\n\nsource\n\n\n#\n\n\nVIVA.clean_column1_siglist!\n \n \nMethod\n.\n\n\nclean_column1_siglist!(siglist)\nreplaces \nX\n,\nY\n,\nM\n with 23,24,25 {Int}\n\n\n\n\n\nuse in load_siglist() because X and Y need to be replaced with Int\n\n\nsource\n\n\n#\n\n\nVIVA.combined_all_genotype_array_functions\n \n \nMethod\n.\n\n\ncombined_all_genotype_array_functions(sub)\n\n\n\n\n\nconvert sub from variant filters to gt\nnum\narray and gt\nchromosome\nlabels for plot functions.\n\n\nsource\n\n\n#\n\n\nVIVA.combined_all_read_depth_array_functions\n \n \nMethod\n.\n\n\ncombined_all_read_depth_array_functions(sub)\n\n\n\n\n\nconvert sub from variant filters to dp\nnum\narray and dp\nchromosome\nlabels for plot functions.\n\n\nsource\n\n\n#\n\n\nVIVA.combined_all_read_depth_array_functions_for_avg_dp\n \n \nMethod\n.\n\n\ncombined_all_read_depth_array_functions_for_avg_dp(sub)\n\n\n\n\n\nconvert sub from variant filters to dp\nnum\narray and dp\nchromosome\nlabels for plot functions.\n\n\nsource\n\n\n#\n\n\nVIVA.define_geno_dict\n \n \nMethod\n.\n\n\ndefine_geno_dict()\n\n\n\n\n\nreturns dictionary of values for use in replace\ngenotype\nwith_vals()\n\n\nsource\n\n\n#\n\n\nVIVA.dp_heatmap2\n \n \nMethod\n.\n\n\ndp_heatmap2(input::Array{Int64,2},title::String,chrom_label_info::Tuple{Array{String,1},Array{Int64,1},String}, sample_names,chr_pos_tuple_list_rev,y_axis_label_option,x_axis_label_option)\n\n\n\n\n\ngenerate heatmap of read depth data.\n\n\nsource\n\n\n#\n\n\nVIVA.find_group_label_indices\n \n \nMethod\n.\n\n\nfind_group_label_indices(pheno,trait_to_group_by,row_to_sort_by)\n\n\n\n\n\nfind indices and determines names for group 1 and group 2 labels on plots. finds index of center of each sample group to place tick mark and label.\n\n\nsource\n\n\n#\n\n\nVIVA.generate_chromosome_positions_for_hover_labels\n \n \nMethod\n.\n\n\ngenerate_chromosome_positions_for_hover_labels(chr_labels::Array{Any,2})\n\n\n\n\n\ncreates tuple of genomic locations to set as tick labels. This is automatically store chromosome positions in hover labels. However tick labels are set to hidden with showticklabels=false so they will not crowd the y axis.\n\n\nsource\n\n\n#\n\n\nVIVA.generate_genotype_array\n \n \nMethod\n.\n\n\ngenerate_genotype_array(record_sub::Array{Any,1},genotype_field::String)\n\n\n\n\n\nReturns numerical array of genotype values (either genotype or read\ndepth values) which are translated by another function into num\narray Where genotype\nfield is either GT or DP to visualize genotype or read\ndepth\n\n\nsource\n\n\n#\n\n\nVIVA.generate_hover_text_array\n \n \nMethod\n.\n\n\ngenerate_hover_text_array(chr_pos_tuple_list,sample_names,input,mode)\n\n\n\n\n\nGenerate array of data for hovertext to use as custom hover text for ungrouped heatmaps. Where mode is GT or DP.\n\n\nsource\n\n\n#\n\n\nVIVA.generate_hover_text_array_grouped\n \n \nMethod\n.\n\n\ngenerate_hover_text_array_grouped(chr_pos_tuple_list,sample_names,input,mode)\n\n\n\n\n\nGenerate array of data for hovertext to use as custom hover text for grouped heatmaps. Where mode is GT or DP.\n\n\nsource\n\n\n#\n\n\nVIVA.genotype_heatmap2\n \n \nMethod\n.\n\n\ngenotype_heatmap2(input::Array{Any,2},title::AbstractString,filename,sample_names,gt_chromosome_labels,y_axis_label_option,x_axis_label_option,save_ext,chrom_label_info)\n\n\n\n\n\ngenerate heatmap of genotype data.\n\n\nsource\n\n\n#\n\n\nVIVA.genotype_heatmap_with_groups\n \n \nMethod\n.\n\n\ngenotype\nheatmap\nwith\ngroups(input::Array{Int64,2},title::String,chrom\nlabel\ninfo::Tuple{Array{String,1},Array{Int64,1},String},group\nlabel\npack::Array{Any,1},id\nlist,chr\npos\ntuple\nlist\nrev,y\naxis\nlabel\noption,trait\nlabel\narray,x\naxis\nlabel\noption,number_rows) generate heatmap of genotype data.\n\n\nsource\n\n\n#\n\n\nVIVA.get_sample_names\n \n \nMethod\n.\n\n\nget_sample_names(reader)\n\n\n\n\n\nreturns sample ids of vcf file as a vector of symbols for naming columns of num_array dataframe object for column filter functions\n\n\nsource\n\n\n#\n\n\nVIVA.io_chromosome_range_vcf_filter\n \n \nMethod\n.\n\n\nio\nchromosome\nrange\nvcf\nfilter(chr\nrange::String, vcf\nfilename::AbstractString) create subarray of vcf variant records matching user specified chromosome range in format: (e.g. chr1:0-30000000)\n\n\nsource\n\n\n#\n\n\nVIVA.io_pass_filter\n \n \nMethod\n.\n\n\nio_pass_filter(vcf_filename)\n\n\n\n\n\nreturns subarray of vcf records including only records with FILTER status = PASS\n\n\nsource\n\n\n#\n\n\nVIVA.io_sig_list_vcf_filter\n \n \nMethod\n.\n\n\nio_sig_list_vcf_filter(sig_list,vcf_filename)\n\n\n\n\n\nreturns subarray of variant records matching a list of variant positions returned from load_siglist()\n\n\nsource\n\n\n#\n\n\nVIVA.jupyter_main_new\n \n \nMethod\n.\n\n\njupyter\nmain(vcf\nfilename,field\nto\nvisualize,variant\nfilter,sample\nfilter,plot\ntypes,save\nformat,plot\ntitle,plot\nlabels,output_directory::String)\n\n\nfilters, plots visualization, and saves as figure. utilizes all global variables set in first cell of jupyter notebook\n\n\nsource\n\n\n#\n\n\nVIVA.list_sample_names_low_dp\n \n \nMethod\n.\n\n\nlist_sample_names_low_dp(sample_avg_list::Array{Float64,2},sample_names)\n\n\n\n\n\nreturns list of sample ids that have an average read depth of under 15 across all variant positions\n\n\nsource\n\n\n#\n\n\nVIVA.list_variant_positions_low_dp\n \n \nMethod\n.\n\n\nlist_variant_positions_low_dp(variant_avg_list::Array{Float64,2},chrom_labels)\n\n\n\n\n\nfinds variant positions that have an average read depth of under 15 across all patients\n\n\nsource\n\n\n#\n\n\nVIVA.load_siglist\n \n \nMethod\n.\n\n\nload_siglist(filename::AbstractString)\n\n\n\n\n\nwhere x = filename of significant SNP variant location list in comma delimited format (saved as .csv)\n\n\nsource\n\n\n#\n\n\nVIVA.pass_chrrange_filter\n \n \nMethod\n.\n\n\npass_chrrange_filter(reader::GeneticVariation.VCF.Reader,chr_range::AbstractString,vcf_filename)\n\n\n\n\n\nreturns subarray of vcf records with io\npass\nfilter and io\nchromosome\nrange\nvcf\nfilter applied.\n\n\nsource\n\n\n#\n\n\nVIVA.pass_chrrange_siglist_filter\n \n \nMethod\n.\n\n\npass_chrrange_siglist_filter(vcf_filename,sig_list,chr_range::AbstractString)\n\n\n\n\n\nreturns subarray of vcf records with io\npass\nfilter, io\nsig\nlist\nvcf\nfilter, and io\nchromosome\nrange\nvcf\nfilter applied.\n\n\nsource\n\n\n#\n\n\nVIVA.pass_siglist_filter\n \n \nMethod\n.\n\n\npass_siglist_filter(vcf_filename,sig_list,chr_range::AbstractString)\n\n\n\n\n\nreturns subarray of vcf records with io\npass\nfilter, io\nsig\nlist\nvcf\nfilter, and io\nchromosome\nrange\nvcf\nfilter applied.\n\n\nsource\n\n\n#\n\n\nVIVA.process_plot_inputs\n \n \nMethod\n.\n\n\nprocess_plot_inputs(chrom_label_info,sample_names,chr_pos_tuple_list_rev)\n\n\n\n\n\nPrepares input for heatmap plot function for both genotype and read depth plots without \u2013group_samples flag.\n\n\nsource\n\n\n#\n\n\nVIVA.process_plot_inputs_for_grouped_data\n \n \nMethod\n.\n\n\nprocess_plot_inputs_for_grouped_data(chrom_label_info::Tuple{Array{String,1},Array{Int64,1},String},group_label_pack::Array{Any,1},id_list,chr_pos_tuple_list_rev,trait_label_array)\n\n\n\n\n\nPrepares input for heatmap plot function for both genotype and read depth plots with \u2013group_samples flag.\n\n\nsource\n\n\n#\n\n\nVIVA.read_depth_threshhold\n \n \nMethod\n.\n\n\nread_depth_threshhold(dp_array::Array{Int64,2})\n\n\n\n\n\nCaps read depth outlier values at user defined threshhold. threshhold defaults to dp = 100. All dp over 100 are set to 100 to visualize read depth values between 0 \n dp \n 100 in better definition.\n\n\nsource\n\n\n#\n\n\nVIVA.returnXY_column1!\n \n \nMethod\n.\n\n\nreturnXY_column1!(chr_label_vector)\n\n\n\n\n\nReplace String \"23\",\"24\",\"25\" with \"X\",\"Y\",\"M\" in chromosome label vector used for plot labels\n\n\nsource\n\n\n#\n\n\nVIVA.returnXY_column1_siglist!\n \n \nMethod\n.\n\n\nreturnXY_column1_siglist!(siglist_sorted)\n\n\n\n\n\nReplace String \"23\",\"24\",\"25\" with \"X\",\"Y\",\"M\" in siglist for filtering\n\n\nsource\n\n\n#\n\n\nVIVA.save_graphic\n \n \nMethod\n.\n\n\nsave_graphic(graphic,output_directory,save_ext,title)\n\n\n\n\n\nSave plot in either html or static image format\n\n\nsource\n\n\n#\n\n\nVIVA.save_numerical_array\n \n \nMethod\n.\n\n\nsave_numerical_array(num_array::Matrix{Any},sample_names,chr_labels,title,output_directory)\n\n\n\n\n\nsave numerical array with chr labels and sample ids to working directory\n\n\nsource\n\n\n#\n\n\nVIVA.select_columns\n \n \nMethod\n.\n\n\nselect_columns(filename_sample_list::AbstractString, num_array::Array{Int64,2}, sample_names)\n\n\n\n\n\nreturns num\narray with columns matching user generated list of sample ids to select for analysis. num\narray now has sample ids in first row.\n\n\nsource\n\n\n#\n\n\nVIVA.sortcols_by_phenotype_matrix\n \n \nMethod\n.\n\n\nsortcols_by_phenotype_matrix(pheno_matrix_filename::String,trait_to_group_by::String,num_array::Array{Int64,2}, sample_names::Array{Symbol,2})\n\n\n\n\n\ngroup samples by a common trait using a user generated key matrix (\"phenotype matrix\") returns num\narray,group\nlabel_pack,\n\n\nsource\n\n\n#\n\n\nVIVA.translate_genotype_to_num_array\n \n \nMethod\n.\n\n\ntranslate_genotype_to_num_array(genotype_array,geno_dict)\n\n\n\n\n\nreturns a tuple of num\narray for plotting, and chromosome labels for plotting as label bar. Translates array of genotype values to numerical array of categorical values. Genotype values are converted to categorical values. No\ncall=0, 0/0=1, heterozygous\nvariant=2, homozygous\nvariant=3\n\n\nsource\n\n\n#\n\n\nVIVA.translate_readdepth_strings_to_num_array\n \n \nMethod\n.\n\n\ntranslate_readdepth_strings_to_num_array(read_depth_array::Array{Any,2})\n\n\n\n\n\nReturns array of read\ndepth as int for plotting and average calculation. Ceiling of dp=100 is set to prevent high dp value from hiding (or \"blowing out\") low dp values. (see read\ndepth\nthreshhold() ). Where read\ndepth\narray is output of generate\ngenotype\narray() for DP option returns a tuple of num\narray type Int for average calculation and plotting, and chromosome labels for plotting as label bar\n\n\nsource\n\n\n#\n\n\nVIVA.build_set_from_list\n \n \nMethod\n.\n\n\nbuild_set_from_list(sig_list::Array{Any,2})\n\n\n\n\n\nbuild set of tuples of chrom and pos of each record in vcf for use in sig\nlist\nfilters.\n\n\nsource\n\n\n#\n\n\nVIVA.create_chr_dict\n \n \nMethod\n.\n\n\ncreate_chr_dict()\n\n\n\n\n\ncreates dict for use in combined\nall\ngenotype\narray\nfunctions() for removing 'chr' from chromosome labels to allow sorting variant records by chromosome position.\n\n\nsource\n\n\n#\n\n\nVIVA.dp_heatmap2_with_groups\n \n \nMethod\n.\n\n\ndp_heatmap2_with_groups(input::Array{Int64,2},title::String,chrom_label_info::Tuple{Array{String,1},Array{Int64,1},String},group_label_pack::Array{Any,1},id_list,chr_pos_tuple_list_rev,y_axis_label_option,trait_label_array,x_axis_label_option,number_rows)\n\n\n\n\n\ngenerate heatmap of read depth data with grouped samples.\n\n\nsource\n\n\n#\n\n\nVIVA.index_vcf\n \n \nMethod\n.\n\n\nindex_vcf(vcf_filename)\n\n\n\n\n\nCreates and saves index file with three column array of vcf chrom, position, and row number to be used by significant list filter functions.\n\n\nsource\n\n\n#\n\n\nVIVA.make_chromosome_labels\n \n \nMethod\n.\n\n\nmake_chromosome_labels(chrom_label_info)\n\n\n\n\n\nReturns vector of values to use as tick vals to show first chromosome label per chromosome with blank spaces between each first chromosome position for use with \u2013y\naxis\nlabels=chromosomes. duplicate\nlast\nlabel tells if last chrom label is single or mutiple which affects number\nto\nfill value.\n\n\nsource\n\n\n#\n\n\nVIVA.match_siglist_to_index\n \n \nMethod\n.\n\n\nmatch_siglist_to_index(sig_list,vcf_index)\n\n\n\n\n\nReturns vcf row indices of each variant position in sig_list for reader function to allow fast filtering in significant list filter funcitons.\n\n\nsource\n\n\n#\n\n\nVIVA.sort_genotype_array\n \n \nMethod\n.\n\n\nsort_genotype_array(genotype_array)\n\n\n\n\n\nsorts genotype array for GT or DP by chromosomal location\n\n\nsource\n\n\n#\n\n\nVIVA.translate_readdepth_strings_to_num_array_for_avg_dp\n \n \nMethod\n.\n\n\ntranslate_readdepth_strings_to_num_array_for_avg_dp(read_depth_array::Array{Any,2})\n\n\n\n\n\nReturns array of read\ndepth as int for plotting and average calculation. 'read\ndepth\narray' is output of generate\ngenotype\narray() for DP option returns a tuple of num\narray type Int for average calculation and plotting, and chromosome labels for plotting as label bar No call is replaced with 0 for avg_calculation. Ceiling of dp=100 is set to prevent high dp value from hiding (or \"blowing out\") low dp values.\n\n\nsource", 
            "title": "API"
        }, 
        {
            "location": "/api/#import", 
            "text": "using VIVA", 
            "title": "Import"
        }, 
        {
            "location": "/api/#index", 
            "text": "VIVA.add_pheno_matrix_to_dp_data_for_plotting  VIVA.add_pheno_matrix_to_gt_data_for_plotting  VIVA.avg_dp_samples  VIVA.avg_dp_variant  VIVA.avg_sample_dp_scatter  VIVA.avg_variant_dp_line_chart  VIVA.build_set_from_list  VIVA.checkfor_outputdirectory  VIVA.chromosome_label_generator  VIVA.chrrange_siglist_filter  VIVA.clean_column1!  VIVA.clean_column1_siglist!  VIVA.combined_all_genotype_array_functions  VIVA.combined_all_read_depth_array_functions  VIVA.combined_all_read_depth_array_functions_for_avg_dp  VIVA.create_chr_dict  VIVA.define_geno_dict  VIVA.dp_heatmap2  VIVA.dp_heatmap2_with_groups  VIVA.find_group_label_indices  VIVA.generate_chromosome_positions_for_hover_labels  VIVA.generate_genotype_array  VIVA.generate_hover_text_array  VIVA.generate_hover_text_array_grouped  VIVA.genotype_heatmap2  VIVA.genotype_heatmap_with_groups  VIVA.get_sample_names  VIVA.index_vcf  VIVA.io_chromosome_range_vcf_filter  VIVA.io_pass_filter  VIVA.io_sig_list_vcf_filter  VIVA.jupyter_main_new  VIVA.list_sample_names_low_dp  VIVA.list_variant_positions_low_dp  VIVA.load_siglist  VIVA.make_chromosome_labels  VIVA.match_siglist_to_index  VIVA.pass_chrrange_filter  VIVA.pass_chrrange_siglist_filter  VIVA.pass_siglist_filter  VIVA.process_plot_inputs  VIVA.process_plot_inputs_for_grouped_data  VIVA.read_depth_threshhold  VIVA.returnXY_column1!  VIVA.returnXY_column1_siglist!  VIVA.save_graphic  VIVA.save_numerical_array  VIVA.select_columns  VIVA.sort_genotype_array  VIVA.sortcols_by_phenotype_matrix  VIVA.translate_genotype_to_num_array  VIVA.translate_readdepth_strings_to_num_array  VIVA.translate_readdepth_strings_to_num_array_for_avg_dp", 
            "title": "Index"
        }, 
        {
            "location": "/api/#functions", 
            "text": "#  VIVA.add_pheno_matrix_to_dp_data_for_plotting     Method .  add_pheno_matrix_to_dp_data_for_plotting(pheno_matrix,dp_num_array,trait_labels,chrom_label_info,number_rows)  add the pheno matrix used to group samples to the data array for input into plotting functions. Resizes the pheno matrix to maintain correct dimensions for heatmap viz by finding value=0.05 number rows*data to multiply each pheno row by before vcat.  source  #  VIVA.add_pheno_matrix_to_gt_data_for_plotting     Method .  add_pheno_matrix_to_gt_data_for_plotting(pheno_matrix,gt_num_array,trait_labels,chrom_label_info,number_rows)  add the pheno matrix used to group samples to the data array for input into plotting functions. Resizes the pheno matrix to maintain correct dimensions for heatmap viz by finding value=0.05 number rows*data to multiply each pheno row by before vcat.  source  #  VIVA.avg_dp_samples     Method .  avg_dp_samples(dp_num_array::Array{Int64,2})  create sample avg list vector that lists averages of read depth for each sample for input into avg sample dp line chart(sample avg list) dp num array must contain dp values as Int64 and be without chromosome position columns  source  #  VIVA.avg_dp_variant     Method .  avg_dp_variant(dp_num_array::Array{Int64,2})  create variant avg list vector that lists averages of read depth for each variant for input into avg variant dp line chart(variant avg list)  source  #  VIVA.avg_sample_dp_scatter     Method .  avg_sample_dp_scatter(sample_avg_list::Array{Float64,1},sample_names,x_axis_label_option)  generate line chart of average read depths of each sample.  source  #  VIVA.avg_variant_dp_line_chart     Method .  avg_variant_dp_line_chart(variant_avg_list::Array{Float64,1},chr_pos_tuple_list,y_axis_label_option,chrom_label_info)  generate line chart of average read depths of each variant.  source  #  VIVA.checkfor_outputdirectory     Method .  checkfor_outputdirectory(path::String)  Checks to see if output directory exists already. If it doesn't, it creates the new directory to write output files to.  source  #  VIVA.chromosome_label_generator     Method .  chromosome_label_generator(chromosome_labels::Array{Any,1})  Returns vector of chr labels and indices to mark chromosomes in plotly heatmap Specifically, saves indexes and chrom labels in vectors to pass into heatmap function to ticvals and tictext respectively. Input is either gt chromosome labels or dp chromosome labels from translate gt/dp to num array()  source  #  VIVA.chrrange_siglist_filter     Method .  chrrange_siglist_filter(vcf_filename,sig_list,chr_range::AbstractString)  returns subarray of vcf records with io pass filter, io sig list vcf filter, and io chromosome range vcf filter applied.  source  #  VIVA.clean_column1!     Method .  clean_column1!(matrix_with_chr_column)  Replace String \"X\",\"Y\",\"M\" from chromosome column with 23,24,25 respectively so variants can be sorted by descending chr position for plotting  source  #  VIVA.clean_column1_siglist!     Method .  clean_column1_siglist!(siglist)\nreplaces  X , Y , M  with 23,24,25 {Int}  use in load_siglist() because X and Y need to be replaced with Int  source  #  VIVA.combined_all_genotype_array_functions     Method .  combined_all_genotype_array_functions(sub)  convert sub from variant filters to gt num array and gt chromosome labels for plot functions.  source  #  VIVA.combined_all_read_depth_array_functions     Method .  combined_all_read_depth_array_functions(sub)  convert sub from variant filters to dp num array and dp chromosome labels for plot functions.  source  #  VIVA.combined_all_read_depth_array_functions_for_avg_dp     Method .  combined_all_read_depth_array_functions_for_avg_dp(sub)  convert sub from variant filters to dp num array and dp chromosome labels for plot functions.  source  #  VIVA.define_geno_dict     Method .  define_geno_dict()  returns dictionary of values for use in replace genotype with_vals()  source  #  VIVA.dp_heatmap2     Method .  dp_heatmap2(input::Array{Int64,2},title::String,chrom_label_info::Tuple{Array{String,1},Array{Int64,1},String}, sample_names,chr_pos_tuple_list_rev,y_axis_label_option,x_axis_label_option)  generate heatmap of read depth data.  source  #  VIVA.find_group_label_indices     Method .  find_group_label_indices(pheno,trait_to_group_by,row_to_sort_by)  find indices and determines names for group 1 and group 2 labels on plots. finds index of center of each sample group to place tick mark and label.  source  #  VIVA.generate_chromosome_positions_for_hover_labels     Method .  generate_chromosome_positions_for_hover_labels(chr_labels::Array{Any,2})  creates tuple of genomic locations to set as tick labels. This is automatically store chromosome positions in hover labels. However tick labels are set to hidden with showticklabels=false so they will not crowd the y axis.  source  #  VIVA.generate_genotype_array     Method .  generate_genotype_array(record_sub::Array{Any,1},genotype_field::String)  Returns numerical array of genotype values (either genotype or read depth values) which are translated by another function into num array Where genotype field is either GT or DP to visualize genotype or read depth  source  #  VIVA.generate_hover_text_array     Method .  generate_hover_text_array(chr_pos_tuple_list,sample_names,input,mode)  Generate array of data for hovertext to use as custom hover text for ungrouped heatmaps. Where mode is GT or DP.  source  #  VIVA.generate_hover_text_array_grouped     Method .  generate_hover_text_array_grouped(chr_pos_tuple_list,sample_names,input,mode)  Generate array of data for hovertext to use as custom hover text for grouped heatmaps. Where mode is GT or DP.  source  #  VIVA.genotype_heatmap2     Method .  genotype_heatmap2(input::Array{Any,2},title::AbstractString,filename,sample_names,gt_chromosome_labels,y_axis_label_option,x_axis_label_option,save_ext,chrom_label_info)  generate heatmap of genotype data.  source  #  VIVA.genotype_heatmap_with_groups     Method .  genotype heatmap with groups(input::Array{Int64,2},title::String,chrom label info::Tuple{Array{String,1},Array{Int64,1},String},group label pack::Array{Any,1},id list,chr pos tuple list rev,y axis label option,trait label array,x axis label option,number_rows) generate heatmap of genotype data.  source  #  VIVA.get_sample_names     Method .  get_sample_names(reader)  returns sample ids of vcf file as a vector of symbols for naming columns of num_array dataframe object for column filter functions  source  #  VIVA.io_chromosome_range_vcf_filter     Method .  io chromosome range vcf filter(chr range::String, vcf filename::AbstractString) create subarray of vcf variant records matching user specified chromosome range in format: (e.g. chr1:0-30000000)  source  #  VIVA.io_pass_filter     Method .  io_pass_filter(vcf_filename)  returns subarray of vcf records including only records with FILTER status = PASS  source  #  VIVA.io_sig_list_vcf_filter     Method .  io_sig_list_vcf_filter(sig_list,vcf_filename)  returns subarray of variant records matching a list of variant positions returned from load_siglist()  source  #  VIVA.jupyter_main_new     Method .  jupyter main(vcf filename,field to visualize,variant filter,sample filter,plot types,save format,plot title,plot labels,output_directory::String)  filters, plots visualization, and saves as figure. utilizes all global variables set in first cell of jupyter notebook  source  #  VIVA.list_sample_names_low_dp     Method .  list_sample_names_low_dp(sample_avg_list::Array{Float64,2},sample_names)  returns list of sample ids that have an average read depth of under 15 across all variant positions  source  #  VIVA.list_variant_positions_low_dp     Method .  list_variant_positions_low_dp(variant_avg_list::Array{Float64,2},chrom_labels)  finds variant positions that have an average read depth of under 15 across all patients  source  #  VIVA.load_siglist     Method .  load_siglist(filename::AbstractString)  where x = filename of significant SNP variant location list in comma delimited format (saved as .csv)  source  #  VIVA.pass_chrrange_filter     Method .  pass_chrrange_filter(reader::GeneticVariation.VCF.Reader,chr_range::AbstractString,vcf_filename)  returns subarray of vcf records with io pass filter and io chromosome range vcf filter applied.  source  #  VIVA.pass_chrrange_siglist_filter     Method .  pass_chrrange_siglist_filter(vcf_filename,sig_list,chr_range::AbstractString)  returns subarray of vcf records with io pass filter, io sig list vcf filter, and io chromosome range vcf filter applied.  source  #  VIVA.pass_siglist_filter     Method .  pass_siglist_filter(vcf_filename,sig_list,chr_range::AbstractString)  returns subarray of vcf records with io pass filter, io sig list vcf filter, and io chromosome range vcf filter applied.  source  #  VIVA.process_plot_inputs     Method .  process_plot_inputs(chrom_label_info,sample_names,chr_pos_tuple_list_rev)  Prepares input for heatmap plot function for both genotype and read depth plots without \u2013group_samples flag.  source  #  VIVA.process_plot_inputs_for_grouped_data     Method .  process_plot_inputs_for_grouped_data(chrom_label_info::Tuple{Array{String,1},Array{Int64,1},String},group_label_pack::Array{Any,1},id_list,chr_pos_tuple_list_rev,trait_label_array)  Prepares input for heatmap plot function for both genotype and read depth plots with \u2013group_samples flag.  source  #  VIVA.read_depth_threshhold     Method .  read_depth_threshhold(dp_array::Array{Int64,2})  Caps read depth outlier values at user defined threshhold. threshhold defaults to dp = 100. All dp over 100 are set to 100 to visualize read depth values between 0   dp   100 in better definition.  source  #  VIVA.returnXY_column1!     Method .  returnXY_column1!(chr_label_vector)  Replace String \"23\",\"24\",\"25\" with \"X\",\"Y\",\"M\" in chromosome label vector used for plot labels  source  #  VIVA.returnXY_column1_siglist!     Method .  returnXY_column1_siglist!(siglist_sorted)  Replace String \"23\",\"24\",\"25\" with \"X\",\"Y\",\"M\" in siglist for filtering  source  #  VIVA.save_graphic     Method .  save_graphic(graphic,output_directory,save_ext,title)  Save plot in either html or static image format  source  #  VIVA.save_numerical_array     Method .  save_numerical_array(num_array::Matrix{Any},sample_names,chr_labels,title,output_directory)  save numerical array with chr labels and sample ids to working directory  source  #  VIVA.select_columns     Method .  select_columns(filename_sample_list::AbstractString, num_array::Array{Int64,2}, sample_names)  returns num array with columns matching user generated list of sample ids to select for analysis. num array now has sample ids in first row.  source  #  VIVA.sortcols_by_phenotype_matrix     Method .  sortcols_by_phenotype_matrix(pheno_matrix_filename::String,trait_to_group_by::String,num_array::Array{Int64,2}, sample_names::Array{Symbol,2})  group samples by a common trait using a user generated key matrix (\"phenotype matrix\") returns num array,group label_pack,  source  #  VIVA.translate_genotype_to_num_array     Method .  translate_genotype_to_num_array(genotype_array,geno_dict)  returns a tuple of num array for plotting, and chromosome labels for plotting as label bar. Translates array of genotype values to numerical array of categorical values. Genotype values are converted to categorical values. No call=0, 0/0=1, heterozygous variant=2, homozygous variant=3  source  #  VIVA.translate_readdepth_strings_to_num_array     Method .  translate_readdepth_strings_to_num_array(read_depth_array::Array{Any,2})  Returns array of read depth as int for plotting and average calculation. Ceiling of dp=100 is set to prevent high dp value from hiding (or \"blowing out\") low dp values. (see read depth threshhold() ). Where read depth array is output of generate genotype array() for DP option returns a tuple of num array type Int for average calculation and plotting, and chromosome labels for plotting as label bar  source  #  VIVA.build_set_from_list     Method .  build_set_from_list(sig_list::Array{Any,2})  build set of tuples of chrom and pos of each record in vcf for use in sig list filters.  source  #  VIVA.create_chr_dict     Method .  create_chr_dict()  creates dict for use in combined all genotype array functions() for removing 'chr' from chromosome labels to allow sorting variant records by chromosome position.  source  #  VIVA.dp_heatmap2_with_groups     Method .  dp_heatmap2_with_groups(input::Array{Int64,2},title::String,chrom_label_info::Tuple{Array{String,1},Array{Int64,1},String},group_label_pack::Array{Any,1},id_list,chr_pos_tuple_list_rev,y_axis_label_option,trait_label_array,x_axis_label_option,number_rows)  generate heatmap of read depth data with grouped samples.  source  #  VIVA.index_vcf     Method .  index_vcf(vcf_filename)  Creates and saves index file with three column array of vcf chrom, position, and row number to be used by significant list filter functions.  source  #  VIVA.make_chromosome_labels     Method .  make_chromosome_labels(chrom_label_info)  Returns vector of values to use as tick vals to show first chromosome label per chromosome with blank spaces between each first chromosome position for use with \u2013y axis labels=chromosomes. duplicate last label tells if last chrom label is single or mutiple which affects number to fill value.  source  #  VIVA.match_siglist_to_index     Method .  match_siglist_to_index(sig_list,vcf_index)  Returns vcf row indices of each variant position in sig_list for reader function to allow fast filtering in significant list filter funcitons.  source  #  VIVA.sort_genotype_array     Method .  sort_genotype_array(genotype_array)  sorts genotype array for GT or DP by chromosomal location  source  #  VIVA.translate_readdepth_strings_to_num_array_for_avg_dp     Method .  translate_readdepth_strings_to_num_array_for_avg_dp(read_depth_array::Array{Any,2})  Returns array of read depth as int for plotting and average calculation. 'read depth array' is output of generate genotype array() for DP option returns a tuple of num array type Int for average calculation and plotting, and chromosome labels for plotting as label bar No call is replaced with 0 for avg_calculation. Ceiling of dp=100 is set to prevent high dp value from hiding (or \"blowing out\") low dp values.  source", 
            "title": "Functions"
        }
    ]
}